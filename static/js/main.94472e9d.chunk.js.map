{"version":3,"sources":["Components/InteractionChart/InteractionChartData.js","Components/InteractionChart/InteractionChart.js","Components/HorizontalBarChart/HorizontalBarChart.js","Components/HorizontalBarChart/HorizontalBarChartOptions.js","Components/LineChart/LineChart.js","Components/LiquidFilledGauge/LiquidFilledGauge.js","Components/LiquidFilledGauge/LiquidFilledGaugeThree.js","Components/LiquidFilledGauge/LiquidFilledGaugeTwo.js","Components/Menu/LongMenu.js","Components/ZoomableBubbleChart/ZoomableBubbleChart.js","Components/ZoomableBubbleChart/ZoomableBubbleChartTestData.js","Components/GaugeChart/GaugeChart.js","App.js","serviceWorker.js","index.js","CSLOGO.png"],"names":["DATA","barColor","C","low","mid","high","data","city","cityData","State","freq","BarChart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","currentState","createBarCHart","bind","assertThisInitialized","self","node","hGDim","t","r","b","l","w","h","keyValue","filteredData","JSON","parse","stringify","filter","cityName","length","forEach","d","total","currentBar","fD","map","color","svg","d3","attr","parentGroup","selectAll","enter","append","x","domain","rangeRound","xAxis","exit","remove","merge","style","y","range","bars","transition","duration","on","changeDonutState","changeBarState","bandwidth","text","_this2","react_default","a","createElement","ref","Component","Dashboard","_this5","state","currentDonut","setState","Row","Col","lg","md","sm","xs","className","InteractionChart_BarChart","HorizontalBarChart","createHorizontalBarChart","width","options","height","defaultOptions","top","right","bottom","left","visibility","tick","lines","images","xAxisKey","yAxisKey","xAxisDisplayKey","yAxisDisplayKey","fillColorKey","values","sort","reverse","keyMapping","title","margin","undefined","xAxisOptions","yAxisOptions","yAxis","tickTextLength","valueTextLength","minDataLength","barHeight","barGap","minTextLengthBeforeEllipsis","padding","chartImage","imagesReferenceName","noDataText","body","tooltipOrdinalBarChart","xAxisGroup","tickSizeOuter","yAxisGroup","tickFormat","substring","i","html","selectedKey","key","onMouseOverAndMove","bar","onMouseOut","callbackFunction","extraParameters","apply","concat","toConsumableArray","event","pageY","pageX","screenWidth","window","innerWidth","pointerXPosition","tooltipWidth","document","querySelector","clientWidth","tooltipHeight","clientHeight","HorizontalBarChartTestOptions","legends","tooltip","React","LongMenu","_React$useState","useState","_React$useState2","slicedToArray","anchorEl","setAnchorEl","open","Boolean","handleClose","HamburgerMenu_default","isOpen","menuClicked","currentTarget","Menu","id","keepMounted","onClose","MenuItem","onClick","href","GaugeChart","createGaugeChart","targetPercent","loopCount","gaugeColors","percentCenterTextColor","targetTriangleColor","targetValueColor","arcBackgroundColor","arcForegroundColors","arcLineColor","indicator","currentPercentData","currentPercent","colors","g","totalAngle","Math","PI","startAngle","endAngle","outerRadius","innerRadius","foregroundInnerRadius","triangleTranslateMax","arc","forgroundArc","svgClass","svgId","type","size","sin","cos","datum","foreground","fillColor","cities","year","App","selectedCity","handleComboBoxChange","handleClick","newValue","ReactTitle","require","default","flushTitle","bgColor","Container","fluid","src","logo","Card","class","Autocomplete","onChange","e","getOptionLabel","option","renderInput","params","TextField","assign","label","variant","InteractionChart","InteractionChartData","Components_GaugeChart_GaugeChart","Components_HorizontalBarChart_HorizontalBarChart","HorizontalBarChartTestData","location","hostname","match","ReactDOM","render","StrictMode","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.94472e9d.chunk.js","sourcesContent":["// var DATA = {\r\n//     \"barColor\": \"steelblue\", \"C\": { \"low\": \"#807dba\", \"mid\": \"#e08214\", \"high\": \"#41ab5d\" },\r\n//     \"data\": [\r\n//         {   State: \"31-05-12\", freq: { low: 5, mid: 20, high: 170 } }\r\n//         , { State: \"28-05-12\", freq: { low: 1101, mid: 412, high: 674 } }\r\n//         , { State: \"25-05-12\", freq: { low: 932, mid: 2149, high: 418 } }\r\n//         , { State: \"20-05-12\", freq: { low: 832, mid: 1152, high: 1862 } }\r\n//         , { State: \"19-05-12\", freq: { low: 4481, mid: 3304, high: 948 } }\r\n//         , { State: \"18-05-12\", freq: { low: 1619, mid: 167, high: 1063 } }\r\n//         , { State: \"13-05-12\", freq: { low: 1819, mid: 247, high: 1203 } }\r\n//         , { State: \"12-05-12\", freq: { low: 4498, mid: 3852, high: 942 } }\r\n//         , { State: \"10-05-12\", freq: { low: 797, mid: 1849, high: 1534 } }\r\n//         , { State: \"1-05-12\", freq: { low: 162, mid: 379, high: 471 } }\r\n//     ]\r\n// };\r\n\r\n// export default DATA;\r\n\r\nvar DATA = {\r\n    \"barColor\": \"steelblue\", \"C\": { \"low\": \"#807dba\", \"mid\": \"#41ab5d\", \"high\": \"#e08214\" },\r\n    \"data\": [\r\n        {\r\n\r\n            \"city\": \"Viken\",\r\n            \"cityData\": [\r\n                { State: \"02-11-20\", freq: { low: 184, mid: 0, high: 0 } }\r\n                , { State: \"03-11-20\", freq: { low: 178, mid: 0, high: 0 } }\r\n                , { State: \"04-11-20\", freq: { low: 233, mid: 0, high: 0 } }\r\n                , { State: \"05-11-20\", freq: { low: 179, mid: 0, high: 0 } }\r\n                , { State: \"06-11-20\", freq: { low: 160, mid: 0, high: 0 } }\r\n                , { State: \"07-11-20\", freq: { low: 103, mid: 0, high: 0 } }\r\n                , { State: \"08-11-20\", freq: { low: 81, mid: 0, high: 0 } }\r\n                , { State: \"09-11-20\", freq: { low: 7, mid: 0, high: 0 } }\r\n            ]\r\n        },\r\n        {\r\n            \"city\": \"Fredrikstad\",\r\n            \"cityData\": [\r\n                { State: \"02-11-20\", freq: { low: 11, mid: 0, high: 0 } }\r\n                , { State: \"03-11-20\", freq: { low: 15, mid: 0, high: 0 } }\r\n                , { State: \"04-11-20\", freq: { low: 12, mid: 0, high: 0 } }\r\n                , { State: \"05-11-20\", freq: { low: 12, mid: 0, high: 0 } }\r\n                , { State: \"06-11-20\", freq: { low: 17, mid: 0, high: 0 } }\r\n                , { State: \"07-11-20\", freq: { low: 14, mid: 0, high: 0 } }\r\n                , { State: \"08-11-20\", freq: { low: 8, mid: 0, high: 0 } }\r\n                , { State: \"09-11-20\", freq: { low: 31, mid: 0, high: 0 } }\r\n            ]\r\n        },\r\n        {\r\n            \"city\": \"Halden\",\r\n            \"cityData\": [\r\n                { State: \"02-11-20\", freq: { low: 0, mid: 0, high: 0 } }\r\n                , { State: \"03-11-20\", freq: { low: 6, mid: 0, high: 0 } }\r\n                , { State: \"04-11-20\", freq: { low: 1, mid: 0, high: 0 } }\r\n                , { State: \"05-11-20\", freq: { low: 1, mid: 0, high: 0 } }\r\n                , { State: \"06-11-20\", freq: { low: 0, mid: 0, high: 0 } }\r\n                , { State: \"07-11-20\", freq: { low: 1, mid: 0, high: 0 } }\r\n                , { State: \"08-11-20\", freq: { low: 3, mid: 0, high: 0 } }\r\n                , { State: \"09-11-20\", freq: { low: 0, mid: 0, high: 0 } }\r\n            ]\r\n        }\r\n    ]\r\n};\r\n\r\nexport default DATA;","import React, { Component } from 'react';\r\nimport * as d3 from 'd3';\r\n// import { select, selectAll } from \"d3-selection\";\r\nimport DATA from './InteractionChartData.js';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport './interactionChart-styles.css';\r\n\r\n// var data = DATA.data;\r\n// var colors = DATA.colors;\r\n// var barColor = DATA.barColor; \r\n// console.log(data);\r\n\r\n\r\nclass BarChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        var state = this.props.currentState;\r\n        this.createBarCHart = this.createBarCHart.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.createBarCHart();\r\n    }\r\n    componentDidUpdate() {\r\n        this.createBarCHart();\r\n    }\r\n\r\n    createBarCHart() {\r\n        var self = this;\r\n        var node = this.node;\r\n        var hG = {}, hGDim = { t: 60, r: 0, b: 30, l: 0 };\r\n        hGDim.w = 700 - hGDim.l - hGDim.r;\r\n        hGDim.h = 300 - hGDim.t - hGDim.b;\r\n        \r\n        var keyValue = this.props.keyValue;\r\n        var originalData = JSON.parse(JSON.stringify(DATA.data));\r\n        const filteredData = originalData.filter(cityName => (cityName.city === keyValue));\r\n        var data;\r\n        if (filteredData.length !== 0) {\r\n            data = filteredData[0].cityData;\r\n        }\r\n        data.forEach(function (d) { d.total = d.freq.low + d.freq.mid + d.freq.high; });\r\n\r\n        function segColor(c) { return { low: \"#807dba\", mid: \"#41ab5d\", high: \"#\" }[c]; }\r\n\r\n        if (this.props.currentState.currentBar === 'start') {\r\n            var fD = data.map(function (d) { return [d.State, d.total]; });\r\n            var color = \"#0E2180\";\r\n\r\n        }\r\n        else if (this.props.currentState.currentBar === 'low') {\r\n            var fD = data.map(function (d) { return [d.State, d.freq.low]; });\r\n            var color = \"#807dba\";\r\n        }\r\n        else if (this.props.currentState.currentBar === 'mid') {\r\n            var fD = data.map(function (d) { return [d.State, d.freq.mid]; });\r\n            var color = \"#41ab5d\";\r\n\r\n        }\r\n        else if (this.props.currentState.currentBar === 'high') {\r\n            var fD = data.map(function (d) { return [d.State, d.freq.high]; });\r\n            var color = \"#e08214\";\r\n\r\n        }\r\n\r\n        var svg = d3.select(node)\r\n            .attr(\"class\", \"bargraph\")\r\n            .attr(\"viewBox\", \"-110 0 \" + (hGDim.w + hGDim.l + hGDim.r) + \" \" + (hGDim.h + hGDim.t + hGDim.b + 100));\r\n\r\n        var parentGroup = svg.selectAll(\".parentGroup\").data([0]);\r\n        parentGroup.enter()\r\n            .append(\"g\")\r\n            .attr(\"class\", \"parentGroup\")\r\n        parentGroup = svg.selectAll(\".parentGroup\");\r\n        \r\n        var x = d3.scaleBand()\r\n            .domain(fD.map(function (d) { return d[0]; })).rangeRound([0, hGDim.w]);\r\n\r\n        var xAxis = parentGroup.selectAll(\".x-axis\").data([fD]);\r\n        xAxis.exit().remove();\r\n        xAxis.enter().append(\"g\").attr(\"class\", \"x-axis\").merge(xAxis)\r\n            .attr(\"transform\", \"translate(0,\" + (hGDim.h + 50) + \")\")\r\n            .call(d3.axisBottom(x))\r\n            .selectAll(\"text\")\r\n            .style(\"text-anchor\", \"end\")\r\n            .attr(\"dx\", \"-.8em\")\r\n            .attr(\"dy\", \".15em\")\r\n            .attr(\"transform\", \"rotate(-65)\");\r\n\r\n        var y = d3.scaleLinear().range([hGDim.h, 0])\r\n            .domain([0, d3.max(fD, function (d) { return d[1]; })]);\r\n\r\n        var bars = parentGroup.selectAll(\".bar\").data(fD);\r\n\r\n        bars.exit().transition()\r\n            .duration(0)\r\n            .attr(\"height\", 0).remove();\r\n\r\n        bars.enter()\r\n            .append(\"rect\")\r\n            .attr(\"class\", \"bar\")\r\n            .merge(bars)\r\n            .on(\"mouseover\", function (d) {\r\n                self.props.changeDonutState(d[0]);\r\n            })\r\n            .on(\"mouseout\", function () {\r\n                self.props.changeDonutState(\"start\");\r\n                self.props.changeBarState(\"start\");\r\n            })\r\n            .attr(\"x\", function (d) { return x(d[0]); })\r\n            .attr(\"y\", function (d) { return y(d[1]); })\r\n            .attr(\"width\", x.bandwidth() - 10)\r\n            .attr(\"height\", function (d) { return hGDim.h - y(d[1]); })\r\n            .attr('fill', color)\r\n            .attr(\"transform\", \"translate(5,50)\");\r\n\r\n        var text = parentGroup.selectAll(\".text\").data(fD);\r\n\r\n        text.exit().remove();\r\n        text.enter()\r\n            .append(\"text\")\r\n            .attr(\"class\", \"text\")\r\n            .merge(text)\r\n            .text(function (d) { return d3.format(\",\")(d[1]) })\r\n            .attr(\"x\", function (d) { return x(d[0]) + 20; })\r\n            .attr(\"y\", function (d) { return y(d[1]) - 5; })\r\n            .attr(\"transform\", \"translate(0,50)\")\r\n            .attr(\"text-anchor\", \"middle\");\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <svg ref={node => (this.node = node)} />\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\n\r\nclass Donut extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        var state = this.props.currentState;\r\n        this.createDonutCHart = this.createDonutCHart.bind(this);\r\n\r\n    }\r\n\r\n    // componentDidMount() {\r\n    //     this.createDonutCHart();\r\n    // }\r\n    // componentDidUpdate() {\r\n    //     this.createDonutCHart();\r\n    // }\r\n\r\n    createDonutCHart() {\r\n        var self = this;\r\n        var hG = {}, hGDim = { t: 60, r: 0, b: 30, l: 0 };\r\n        hGDim.w = 300 - hGDim.l - hGDim.r;\r\n        hGDim.h = 450 - hGDim.t - hGDim.b;\r\n        var pC = {}, pieDim = { w: 250, h: 250 };\r\n        pieDim.r = Math.min(pieDim.w, pieDim.h) / 2;\r\n\r\n        var keyValue = this.props.keyValue;\r\n        var originalData = JSON.parse(JSON.stringify(DATA.data));\r\n        const filteredData = originalData.filter(cityName => (cityName.city === keyValue));\r\n        var data;\r\n        if (filteredData.length !== 0) {\r\n            data = filteredData[0].cityData;\r\n        }\r\n        console.log(data);\r\n        data.forEach(function (d) { d.total = d.freq.low + d.freq.mid + d.freq.high; });\r\n\r\n        function segColor(c) { return { low: \"#807dba\", mid: \"#41ab5d\", high: \"#e08214\" }[c]; }\r\n        if (this.props.currentState.currentDonut === 'start') {\r\n            var pD = ['low', 'mid', 'high'].map(function (d) {\r\n                return { type: d, freq: d3.sum(data.map(function (t) { return t.freq[d]; })) };\r\n            });\r\n\r\n        }\r\n\r\n        else {\r\n            function filter_dates(event) {\r\n                return event.State === self.props.currentState.currentDonut;\r\n            }\r\n\r\n            var filtered = data.filter(filter_dates);\r\n            var pD = ['low', 'mid', 'high'].map(function (d) {\r\n                return { type: d, freq: filtered[0].freq[d] };\r\n            });\r\n        }\r\n\r\n        var svg = d3.select(this.node)\r\n            .attr(\"class\", \"pie\")\r\n            .attr(\"viewBox\", \"80 -150 \" + (hGDim.w + hGDim.l + hGDim.r) + \" \" + (hGDim.h + hGDim.t + hGDim.b));\r\n        // .attr(\"width\", pieDim.w)\r\n        // .attr(\"height\", pieDim.h);\r\n\r\n        var pieGroup = svg.selectAll(\".pieGroup\").data([0]);\r\n        pieGroup.enter()\r\n            .append(\"g\")\r\n            .attr(\"class\", \"pieGroup\")\r\n            .attr(\"transform\", \"translate(\" + hGDim.w / 3.5 + \",20)\")\r\n        pieGroup = svg.selectAll(\".pieGroup\");\r\n\r\n        var arc = d3.arc().outerRadius(pieDim.r - 10).innerRadius(0);\r\n\r\n        var pie = d3.pie().sort(null).value(function (d) { return d.freq; });\r\n\r\n        var pieData = pieGroup.selectAll(\".piepath\").data(pie(pD));\r\n\r\n        pieData.exit().remove();\r\n\r\n        pieData.enter().append(\"path\")\r\n            .attr(\"class\", \"piepath\")\r\n            .merge(pieData)\r\n            .on(\"mouseover\", function (d) {\r\n                self.props.changeBarState(d.data.type);\r\n            })\r\n            .on(\"mouseout\", function () {\r\n                self.props.changeBarState(\"start\");\r\n                self.props.changeDonutState(\"start\");\r\n            })\r\n            .attr(\"d\", arc)\r\n            .transition().duration(500)\r\n            .attrTween(\"d\", arcTween)\r\n            .attr(\"transform\", \"translate(\" + pieDim.w / 2 + \",\" + pieDim.h / 2 + \")\")\r\n            .style(\"fill\", function (d) { return segColor(d.data.type); });\r\n\r\n        function arcTween(a) {\r\n            var i = d3.interpolate(this._current, a);\r\n            this._current = i(0);\r\n            return function (t) { return arc(i(t)); };\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <svg ref={node => (this.node = node)} />\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\n\r\nclass Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { currentBar: \"start\", currentDonut: \"start\" };\r\n        this.changeBarState = this.changeBarState.bind(this);\r\n        this.changeDonutState = this.changeDonutState.bind(this);\r\n\r\n    }\r\n\r\n    changeBarState(x) {\r\n        this.setState({\r\n            currentBar: x\r\n\r\n        })\r\n    }\r\n    changeDonutState(x) {\r\n        this.setState({\r\n            currentDonut: x\r\n\r\n        })\r\n    }\r\n\r\n    render() {\r\n        var self = this;\r\n        return (\r\n            <Row>\r\n                <Col lg={10} md={10} sm={10} xs={10} className=\"interactionColBar\">\r\n                    <BarChart className=\"BarChart\" currentState={self.state} \r\n                    changeDonutState={self.changeDonutState} changeBarState={self.changeBarState}\r\n                    keyValue={self.props.keyValue}></BarChart>\r\n                </Col>\r\n                {/* <Col lg={6} md={6} sm={3} xs={3} className=\"interactionColDonut\">\r\n                    <Donut className=\"DonutCHart\" currentState={self.state} \r\n                    changeDonutState={self.changeDonutState} changeBarState={self.changeBarState}\r\n                    keyValue={self.props.keyValue}></Donut>\r\n                </Col> */}\r\n            </Row>);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Dashboard;","import React, { Component } from 'react';\r\nimport * as d3 from \"d3\";\r\nimport { event } from 'd3';\r\nimport './horizontalBarChart-styles.css';\r\n\r\n\r\nclass HorizontalBarChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.createHorizontalBarChart = this.createHorizontalBarChart.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        this.createHorizontalBarChart();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.createHorizontalBarChart();\r\n    }\r\n    createHorizontalBarChart() {\r\n        var node = this.node;\r\n        var width = (this.props.options && this.props.options.width) ? this.props.options.width : 790,\r\n            height = (this.props.options && this.props.options.height) ? this.props.options.height : 300;\r\n\r\n        var defaultOptions = {\r\n            title: \"defaultTitle\",\r\n            margin: {\r\n                top: 10,\r\n                right: 10,\r\n                bottom: 10,\r\n                left: 10\r\n\r\n            },\r\n            xAxis: {\r\n                visibility: false,\r\n                tick: true,\r\n                domain: true,\r\n                lines: false\r\n\r\n            },\r\n            yAxis: {\r\n                visibility: true,\r\n                tick: true,\r\n                domain: true,\r\n                lines: false,\r\n                images: false\r\n\r\n            },\r\n            tooltip: true,\r\n            colors: [\"green\"],\r\n            keyMapping: {\r\n                xAxisKey: \"value\",\r\n                yAxisKey: \"key\",\r\n                xAxisDisplayKey: \"displayValue\",\r\n                yAxisDisplayKey: \"key\",\r\n                fillColorKey: \"fill\",\r\n            }\r\n        };\r\n\r\n        var data = JSON.parse(JSON.stringify(this.props.data.values));\r\n        if (this.props.sort) {\r\n            data.reverse();\r\n        }\r\n        var options = this.props.options;\r\n        var keyMapping = {\r\n            xAxisKey: (options && options.keyMapping && options.keyMapping.xAxisKey) ? options.keyMapping.xAxisKey : defaultOptions.keyMapping.xAxisKey,\r\n            yAxisKey: (options && options.keyMapping && options.keyMapping.yAxisKey) ? options.keyMapping.yAxisKey : defaultOptions.keyMapping.yAxisKey,\r\n            xAxisDisplayKey: (options && options.keyMapping && options.keyMapping.xAxisDisplayKey) ? options.keyMapping.xAxisDisplayKey : defaultOptions.keyMapping.xAxisDisplayKey,\r\n            yAxisDisplayKey: (options && options.keyMapping && options.keyMapping.yAxisDisplayKey) ? options.keyMapping.yAxisDisplayKey : defaultOptions.keyMapping.yAxisDisplayKey,\r\n            fillColorKey: (options && options.keyMapping && options.keyMapping.fillColorKey) ? options.keyMapping.fillColorKey : defaultOptions.keyMapping.fillColorKey\r\n\r\n        };\r\n\r\n        var title = (options && options.title) || defaultOptions.title;\r\n        var margin = {\r\n            top: (options && options.margin !== undefined && options.margin.top !== undefined) ? options.margin.top : defaultOptions.margin.top,\r\n            right: (options && options.margin !== undefined && options.margin.right !== undefined) ? options.margin.right : defaultOptions.margin.right,\r\n            bottom: (options && options.margin !== undefined && options.margin.bottom !== undefined) ? options.margin.bottom : defaultOptions.margin.bottom,\r\n            left: (options && options.margin !== undefined && options.margin.left !== undefined) ? options.margin.left : defaultOptions.margin.left\r\n\r\n        };\r\n        var xAxisOptions = {\r\n            tick: (options && options.xAxis !== undefined && options.xAxis.tick !== undefined) ? options.xAxis.tick : defaultOptions.xAxis.tick,\r\n            domain: (options && options.xAxis !== undefined && options.xAxis.domain !== undefined) ? options.xAxis.domain : defaultOptions.xAxis.domain,\r\n            lines: (options && options.xAxis !== undefined && options.xAxis.lines !== undefined) ? options.xAxis.lines : defaultOptions.xAxis.lines,\r\n            visibility: (options && options.xAxis !== undefined && options.xAxis.visibility !== undefined) ? options.xAxis.visibility : defaultOptions.xAxis.visibility\r\n\r\n        };\r\n        var yAxisOptions = {\r\n            tick: (options && options.yAxis !== undefined && options.yAxis.tick !== undefined) ? options.yAxis.tick : defaultOptions.yAxis.tick,\r\n            domain: (options && options.yAxis !== undefined && options.yAxis.domain !== undefined) ? options.yAxis.domain : defaultOptions.yAxis.domain,\r\n            lines: (options && options.yAxis !== undefined && options.yAxis.lines !== undefined) ? options.yAxis.lines : defaultOptions.yAxis.lines,\r\n            visibility: (options && options.yAxis !== undefined && options.yAxis.visibility !== undefined) ? options.yAxis.visibility : defaultOptions.yAxis.visibility,\r\n            images: (options && options.yAxis !== undefined && options.yAxis.images !== undefined) ? options.yAxis.images : defaultOptions.yAxis.images\r\n\r\n        };\r\n\r\n        var tickTextLength = (options && options.tickTextLength !== undefined) ? options.tickTextLength : 150,\r\n            valueTextLength = (options && options.valueTextLength !== undefined) ? options.valueTextLength : 10,\r\n            minDataLength = (options && options.minDataLength !== undefined) ? options.minDataLength : 10;\r\n\r\n        var barHeight = (options && options.barHeight !== undefined) ? options.barHeight : 30,\r\n            barGap = (options && options.barGap !== undefined) ? options.barGap : 5,\r\n            minTextLengthBeforeEllipsis = (options && options.minTextLengthBeforeEllipsis !== undefined) ? options.minTextLengthBeforeEllipsis : 25;\r\n\r\n        height = (d3.max([barGap * minDataLength, barGap * data.length, height]));\r\n\r\n        var x = d3.scaleLinear()\r\n            .range([0, width - tickTextLength - valueTextLength]);\r\n\r\n        var y = d3.scaleBand()\r\n            .range([(data && data.length > 0) ? height : 0, 0])\r\n            .padding(0.1);\r\n\r\n        x.domain([0, d3.max(data, function (d) {\r\n            return (+d[keyMapping.xAxisKey] > 0) ? +d[keyMapping.xAxisKey] : 1;\r\n        })]);\r\n\r\n        y.domain(data.map(function (d) {\r\n            return d[keyMapping.yAxisKey];\r\n        }));\r\n\r\n        var chartImage = this.props.data.imagesReferenceName;\r\n\r\n        var svg = d3.select(node)\r\n            .attr(\"class\", \"horizontalBarChart horizontalBarChart\" + title)\r\n            .attr(\"viewBox\", \"-95 -5 \" + (width + margin.left + margin.right) + \" \" + (height + margin.top + margin.bottom) + \"\");\r\n        var parentGroup = svg.selectAll(\".parentGroup\").data([data]);\r\n        parentGroup\r\n            .enter()\r\n            .append(\"g\")\r\n            .merge(parentGroup)\r\n            .attr(\"class\", \"parentGroup\")\r\n            // .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n            .attr(\"transform\", \"translate(10,\" + margin.top + \")\");\r\n\r\n        parentGroup = svg.selectAll(\".parentGroup\");\r\n\r\n        var noDataText = parentGroup.selectAll(\".noDataText\").data([0]);\r\n        noDataText.exit()\r\n            .transition()\r\n            .duration(1000)\r\n            .remove();\r\n\r\n        noDataText.enter().append(\"text\")\r\n            .attr(\"class\", \"noDataText\")\r\n            .merge(noDataText)\r\n            .attr(\"x\", width / 2 - 34)\r\n            .attr(\"y\", height / 2)\r\n            .transition()\r\n            .duration(1000)\r\n            .attr(\"fill\", (data.length === 0) ? \"#333\" : \"transparent\")\r\n            .attr(\"opacity\", (data.length === 0) ? 1 : 0)\r\n            .text(\"No Data\");\r\n\r\n        var body = d3.select(\"body\");\r\n        var tooltipOrdinalBarChart = body.selectAll(\".custom-tooltip\").data([0]);\r\n        tooltipOrdinalBarChart.exit().remove();\r\n        tooltipOrdinalBarChart.enter().append(\"div\").attr(\"class\", \"custom-tooltip\");\r\n\r\n        tooltipOrdinalBarChart = body.selectAll(\".custom-tooltip\");\r\n\r\n        if (xAxisOptions.visibility === true) {\r\n            var xAxisGroup = parentGroup.selectAll(\".xAxis\").data([data]);\r\n            xAxisGroup.exit().remove();\r\n            var xAxis = xAxisGroup.enter().append(\"g\");\r\n            xAxisGroup.merge(xAxis)\r\n                .style('font-size', '20px')\r\n                .attr('transform', 'translate(' + (tickTextLength - 1) + ',' + height + ')')\r\n                .attr('class', 'xAxis')\r\n                .transition().duration(1000)\r\n                .call(d3.axisBottom(x).tickSizeOuter(0));\r\n\r\n            if (xAxisOptions.tick === false) {\r\n                parentGroup.selectAll(\"g .xAxis\").style(\"display\", \"none\");\r\n            }\r\n            if (xAxisOptions.domain === false) {\r\n                parentGroup.selectAll(\"g .xAxis .domain\").style(\"display\", \"none\");\r\n            }\r\n            if (xAxisOptions.lines === true) {\r\n                parentGroup.selectAll(\"g .xAxis .tick\").style(\"display\", \"block\");\r\n                parentGroup.selectAll(\"g .xAxis .tick line\").attr(\"y2\", -(height));\r\n            }\r\n        }\r\n\r\n        if (yAxisOptions.visibility === true) {\r\n            var yAxisGroup = parentGroup.selectAll(\".yAxis\").data([data]);\r\n            yAxisGroup.exit().remove();\r\n            var yAxis = yAxisGroup.enter().append(\"g\");\r\n\r\n            yAxisGroup.merge(yAxis)\r\n                .attr('transform', 'translate(' + (tickTextLength - 1) + ',0)')\r\n                .attr('class', 'yAxis')\r\n                .transition().duration(1000)\r\n                .call(d3.axisLeft(y).tickSizeOuter(0).tickFormat(function (d) { return (d.length > minTextLengthBeforeEllipsis) ? d.substring(0, minTextLengthBeforeEllipsis) + \"...\" : d; }));\r\n\r\n            if (yAxisOptions.images === true) {\r\n                yAxis.selectAll(\".tick\")\r\n                    .append(\"barGroup:foreignObject\")\r\n                    .attr('class', 'yAxisImage')\r\n                    .attr(\"x\", -10 - ((barHeight) ? barHeight : 0))\r\n                    .attr(\"y\", -10)\r\n                    .attr(\"width\", (barHeight && barHeight <= 20) ? barHeight : 20)\r\n                    .attr(\"height\", (barHeight && barHeight <= 20) ? barHeight : 20)\r\n                    .attr(\"class\", function (d, i) {\r\n                        return (\"icon-wrapper \" + chartImage[i])\r\n                    })\r\n                    .append(\"xhtml:body\")\r\n                    .html(\"<p></p>\");\r\n\r\n                d3.selectAll(\".horizontalBarChart\" + title + \" g .yAxis .tick text\").style(\"display\", \"none\");\r\n            }\r\n\r\n            if (yAxisOptions.tick === false) {\r\n                parentGroup.selectAll(\"g.yAxis\").style(\"display\", \"none\");\r\n            }\r\n            if (yAxisOptions.domain === false) {\r\n                parentGroup.selectAll(\"g.yAxis .domain\").style(\"display\", \"none\");\r\n            }\r\n            if (yAxisOptions.lines === false) {\r\n                parentGroup.selectAll(\"g.yAxis .tick line\").style(\"display\", \"none\");\r\n            }\r\n\r\n            parentGroup.selectAll(\".yAxis text\")\r\n                .attr(\"class\", function (d) {\r\n                    return (d === options.selectedKey) ? \"ticks selectedText\" : \"ticks\"\r\n                })\r\n                .style('font-size', '20px')\r\n                .style(\"cursor\", \"default\")\r\n                .on('mouseover', function (key) {\r\n                    let filteredData = data.filter(d => (d[keyMapping.yAxisKey] && d[keyMapping.yAxisKey] === key))[0];\r\n                    if (filteredData) {\r\n                        onMouseOverAndMove(filteredData);\r\n                    }\r\n                })\r\n                .on('mousemove', function (key) {\r\n                    let filteredData = data.filter(d => (d[keyMapping.yAxisKey] && d[keyMapping.yAxisKey] === key))[0];\r\n                    if (filteredData) {\r\n                        onMouseOverAndMove(filteredData);\r\n                    }\r\n                })\r\n                .on('mouseout', function (d) {\r\n                    tooltipOrdinalBarChart.style(\"display\", \"none\");\r\n                });\r\n        }\r\n\r\n        let bar = parentGroup.selectAll(\".horizontalBar\").data(data);\r\n        bar.exit()\r\n            .transition().duration(1000)\r\n            .attr(\"width\", 0)\r\n            .style(\"opacity\", 0)\r\n            .remove();\r\n\r\n        bar.enter().append(\"rect\")\r\n            .attr(\"width\", 0)\r\n            .attr(\"x\", tickTextLength)\r\n            .attr(\"y\", function (d) {\r\n                return y(d[keyMapping.yAxisKey]) - ((barHeight && barHeight > 0) ? ((barHeight - y.bandwidth()) / 2) : 0);\r\n            })\r\n            .attr(\"height\", function (d) { return (barHeight && barHeight > 0) ? barHeight : (y.bandwidth()) })\r\n            .style(\"opacity\", 0)\r\n            .merge(bar)\r\n            .attr(\"class\", function (d) {\r\n                return (options.selectedKey && d[keyMapping.yAxisKey] === options.selectedKey) ? \"horizontalBar selected\" : \"horizontalBar\"\r\n            })\r\n            .on('mouseover', function (d) {\r\n                onMouseOverAndMove(d);\r\n            })\r\n            .on('mousemove', function (d) {\r\n                onMouseOverAndMove(d);\r\n            })\r\n            .on('mouseout', onMouseOut)\r\n            .on('click', function (d) {\r\n                return (options && options.callbackFunction) ? (options.extraParameters) ? options.callbackFunction(d, ...options.extraParameters) : options.callbackFunction(d) : false;\r\n            })\r\n            .style(\"cursor\", (options && options.callbackFunction) ? \"pointer\" : \"default\")\r\n            .transition().duration(1000)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"fill\", function (d) { return (d[keyMapping.fillColorKey]) ? d[keyMapping.fillColorKey] : \"#d9d9d9\"; })\r\n            .attr(\"x\", tickTextLength)\r\n            .attr(\"y\", function (d) {\r\n                return y(d[keyMapping.yAxisKey]) - ((barHeight && barHeight > 0) ? ((barHeight - y.bandwidth()) / 2) : 0);\r\n            })\r\n            .attr(\"height\", function (d) { return (barHeight && barHeight > 0) ? barHeight : (y.bandwidth()) })\r\n            .attr(\"width\", function (d) {\r\n                return x(d[keyMapping.xAxisKey]);\r\n            });\r\n\r\n        let text = parentGroup.selectAll(\".horizontalBarText\").data(data);\r\n        text.exit()\r\n            .transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 0)\r\n            .attr(\"x\", tickTextLength)\r\n            .remove();\r\n        text.enter().append(\"text\")\r\n            .style(\"opacity\", 0)\r\n            .attr(\"x\", tickTextLength)\r\n            .attr(\"y\", function (d) {\r\n                return y(d[keyMapping.yAxisKey]) - ((barHeight && barHeight > 0) ? (((barHeight / 2) - y.bandwidth()) / 2) - (barHeight / 2) + (barHeight / 6) : -y.bandwidth() / 2 - 1.5);\r\n            })\r\n            .style(\"cursor\", \"default\")\r\n            .merge(text)\r\n            .attr(\"class\", function (d) {\r\n                return (d[keyMapping.yAxisKey] === options.selectedKey) ? \"horizontalBarText selectedText\" : \"horizontalBarText\"\r\n            })\r\n            .on('mouseover', function (d) {\r\n                onMouseOverAndMove(d);\r\n            })\r\n            .on('mousemove', function (d) {\r\n                onMouseOverAndMove(d);\r\n            })\r\n            .on('mouseout', onMouseOut)\r\n            .transition().duration(1000)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"font-size\", \"22px\")\r\n            .attr(\"x\", function (d) { return (tickTextLength + x(d[keyMapping.xAxisKey]) + 5); })\r\n            .attr(\"y\", function (d) {\r\n                return y(d[keyMapping.yAxisKey]) - ((barHeight && barHeight > 0) ? (((barHeight / 2) - y.bandwidth()) / 2) - (barHeight / 2) + (barHeight / 6) : -y.bandwidth() / 2 - 1.5);\r\n            })\r\n            .text(function (d) { return d[keyMapping.xAxisDisplayKey] });\r\n\r\n        function onMouseOverAndMove(d) {\r\n            tooltipOrdinalBarChart\r\n\r\n                .style('top', (event.pageY + 90) + 'px')\r\n                .style('left', (event.pageX - 100) + 'px')\r\n                .style(\"display\", \"block\")\r\n                .attr(\"class\", \"custom-tooltip horizontalTooltip\")\r\n                .html(\r\n                    `<div class='row'>\r\n                                        <div class='col col-lg-6 col-md-6 col-sm-6 col-xs-6'>\r\n                                            <p class='tooltipHeader mB0'>\r\n                                            ${d[keyMapping.yAxisDisplayKey]}\r\n                                            </p>\r\n                                                <p class='tooltipValue mB0'>\r\n                                            ${d[keyMapping.xAxisDisplayKey]}\r\n                                            </p>\r\n                                        </div>\r\n                                    </div>`\r\n                );\r\n\r\n            let screenWidth = window.innerWidth,\r\n                pointerXPosition = event.pageX,\r\n                tooltipWidth = document.querySelector(\".horizontalTooltip\").clientWidth,\r\n                tooltipHeight = document.querySelector(\".horizontalTooltip\").clientHeight;\r\n            if ((pointerXPosition + tooltipWidth + 45) >= screenWidth) {\r\n                tooltipOrdinalBarChart.style('left', (event.pageX - tooltipWidth - 20) + 'px');\r\n            }\r\n            tooltipOrdinalBarChart.style('top', (event.pageY - (tooltipHeight / 2)) + 'px');\r\n        }\r\n        function onMouseOut(d) {\r\n            tooltipOrdinalBarChart.style(\"display\", \"none\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"horizontalBarChartWrapper scrollbar\">\r\n                <svg ref={node => (this.node = node)} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HorizontalBarChart;\r\n","const HorizontalBarChartTestOptions = {\r\n    title: \"defaultTitle\",\r\n    margin: {\r\n        top: 20,\r\n        right: 100,\r\n        bottom: 40,\r\n        left: 30\r\n\r\n    },\r\n    xAxis: {\r\n        visibility: true,\r\n        tick: true,\r\n        domain: true,\r\n        lines: false\r\n\r\n    },\r\n    yAxis: {\r\n        visibility: true,\r\n        tick: true,\r\n        domain: true,\r\n        lines: true,\r\n        images: false\r\n\r\n    },\r\n    legends: {\r\n        visibility: true,\r\n    },\r\n    tooltip: true,\r\n    tickTextLength: 40,\r\n    height: 450\r\n\r\n};\r\n\r\n\r\nexport default HorizontalBarChartTestOptions;\r\n","import React, { Component } from 'react';\r\nimport * as d3 from \"d3\";\r\nimport LineChartTestData from './LineChartTestData';\r\nimport './linechart-styles.css';\r\n\r\nclass LineChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.createLineChart = this.createLineChart.bind(this);\r\n        this.state = { title: this.props.data.title };\r\n    }\r\n    componentDidMount() {\r\n        var that = this;\r\n        d3.selectAll(\".toolTipLine\" + that.state.title).remove();\r\n        that.createLineChart();\r\n    }\r\n    componentDidUpdate() {\r\n        var that = this;\r\n        d3.selectAll(\".toolTipLine\" + that.state.title).remove();\r\n        that.createLineChart();\r\n    }\r\n    createLineChart() {\r\n        var node = this.node;\r\n        var width = this.props.width || 700,\r\n            height = this.props.height || 300;\r\n        var defaultOptions = {\r\n            title: \"defaultTitle\",\r\n            colors: [\"red\", \"blue\", \"green\", \"purple\", \"orange\"],\r\n            margin: {\r\n                top: 20,\r\n                right: 30,\r\n                bottom: 20,\r\n                left: 30\r\n            },\r\n            xAxis: {\r\n                visibility: true,\r\n                tick: true,\r\n                domain: true,\r\n                lines: false\r\n            },\r\n            yAxis: {\r\n                visibility: false,\r\n                tick: false,\r\n                domain: false,\r\n                lines: true\r\n            },\r\n            tooltip: true,\r\n        };\r\n        // var data = this.props.data || LineChartTestData;\r\n        var options = this.props.options || defaultOptions;\r\n        var title = options.title;\r\n        var tooltip = options.tooltip;\r\n        var colors = options.colors || defaultOptions.colors;\r\n        var margin = {\r\n            top: options.margin !== undefined ? options.margin.top : defaultOptions.margin.top,\r\n            right: options.margin !== undefined ? options.margin.right : defaultOptions.margin.right,\r\n            bottom: options.margin !== undefined ? options.margin.bottom : defaultOptions.margin.bottom,\r\n            left: options.margin !== undefined ? options.margin.left : defaultOptions.margin.left\r\n        };\r\n        var xAxisOptions = {\r\n            tick: options.xAxis !== undefined ? options.xAxis.tick : defaultOptions.xAxis.tick,\r\n            domain: options.xAxis !== undefined ? options.xAxis.domain : defaultOptions.xAxis.domain,\r\n            lines: options.xAxis !== undefined ? options.xAxis.lines : defaultOptions.xAxis.lines,\r\n            visibility: options.xAxis !== undefined ? options.xAxis.visibility : defaultOptions.xAxis.visibility\r\n        };\r\n        var yAxisOptions = {\r\n            tick: options.yAxis !== undefined ? options.yAxis.tick : defaultOptions.yAxis.tick,\r\n            domain: options.yAxis !== undefined ? options.yAxis.domain : defaultOptions.yAxis.domain,\r\n            lines: options.yAxis !== undefined ? options.yAxis.lines : defaultOptions.yAxis.lines,\r\n            visibility: options.yAxis !== undefined ? options.yAxis.visibility : defaultOptions.yAxis.visibility\r\n        };\r\n\r\n        var keyValue = this.props.keyValue;\r\n        var originalData = JSON.parse(JSON.stringify(this.props.data));\r\n        const filteredData = originalData.filter(cityName => (cityName.city === keyValue)); \r\n        var data;\r\n        if(filteredData.length !== 0){\r\n            data = filteredData[0].cityData;\r\n        }\r\n        var parseTime = d3.timeParse(\"%d-%b-%y\");\r\n        var x = d3.scaleTime().range([0, width]);\r\n        var y = d3.scaleLinear().range([height, 0]);\r\n        data.forEach(function (d) {\r\n            d.key = parseTime(d.key);\r\n            d.value = +d.value;\r\n        });\r\n        x.domain(d3.extent(data, function (d) {\r\n            return d.key;\r\n        }));\r\n        y.domain([0, d3.max(data, function (d) {\r\n            return d.value;\r\n        })]);\r\n        // var xAxis = d3.axisBottom()\r\n        //     .scale(x)\r\n        //     .ticks(5);\r\n        // var yAxis = d3.axisLeft()\r\n        //     .scale(y)\r\n        //     .ticks(5);\r\n        var valueline = d3.line()\r\n            .x(function (d) {\r\n                return x(d.key);\r\n            })\r\n            .y(function (d) {\r\n                return y(d.value);\r\n            });\r\n        var svg = d3.select(node)\r\n            .attr(\"class\", \"lineChartWrapper lineChart\" + title + \" \" + options.svgClass)\r\n            .attr(\"id\", options.svgId);\r\n        ////.attr(\"viewBox\", \"0 0 \" + (width + margin.left + margin.right) + \" \" + (height + margin.top + margin.bottom) + \"\")\r\n        svg.attr(\"viewBox\", \"-43 -45 \" + (width + margin.left + margin.right) + \" \" + (height + margin.top + margin.bottom + 100) + \"\")\r\n        var parentGroup = svg.selectAll(\".parentGroup\").data([0]);\r\n        parentGroup.enter()\r\n            .append(\"g\")\r\n            .attr(\"class\", \"parentGroup\")\r\n            .attr(\"transform\", \"translate(10,0)\");\r\n        parentGroup = svg.selectAll(\".parentGroup\");\r\n        var tooltipLineChart = d3.select('body').selectAll(\".tooltipLineChart\").data([0]);\r\n        tooltipLineChart.exit().remove();\r\n        tooltipLineChart.enter()\r\n            .append('div')\r\n            .attr('class', 'tooltipLineChart');\r\n        tooltipLineChart = d3.select('body').selectAll(\".tooltipLineChart\");\r\n        if (xAxisOptions.visibility === true) {\r\n            // svg.append(\"g\")\r\n            //     .attr(\"class\", \"xAxis\")\r\n            //     .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n            //     .call(xAxis);\r\n            var xAxis = parentGroup.selectAll(\".xAxis\").data([0]);\r\n            xAxis.exit().remove();\r\n            xAxis.enter()\r\n                .append(\"g\")\r\n                .attr(\"class\", \"xAxis\")\r\n                .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n                // .attr(\"font-size\", \"15px\")\r\n                .merge(xAxis)\r\n                .call(d3.axisBottom(x).tickFormat(d3.timeFormat(\"%Y-%m-%d\")))\r\n                .selectAll(\"text\")\r\n                .style(\"text-anchor\", \"end\")\r\n                .attr(\"dx\", \"-.8em\")\r\n                .attr(\"dy\", \".15em\")\r\n                .attr(\"transform\", \"rotate(-65)\");\r\n            if (xAxisOptions.tick === false) {\r\n                d3.selectAll(\".lineChart\" + title + \" g .xAxis\").style(\"display\", \"none\");\r\n            }\r\n            if (xAxisOptions.domain === false) {\r\n                d3.selectAll(\".lineChart\" + title + \" g .xAxis .domain\").style(\"display\", \"none\");\r\n            }\r\n            if (xAxisOptions.lines === true) {\r\n                d3.selectAll(\".lineChart\" + title + \" g .xAxis .tick\").style(\"display\", \"block\");\r\n                d3.selectAll(\".lineChart\" + title + \" g .xAxis .tick line\").attr(\"y2\", -(height)).style(\"stroke\", \"black\");\r\n            }\r\n        }\r\n        if (yAxisOptions.visibility === true) {\r\n            // svg.append(\"g\")\r\n            //     .attr(\"class\", \"yAxis\")\r\n            //     .call(yAxis);\r\n            var yAxis = parentGroup.selectAll(\".yAxis\").data([0]);\r\n            yAxis.exit().remove();\r\n            yAxis.enter()\r\n                .append(\"g\")\r\n                .attr(\"class\", \"yAxis\")\r\n                .merge(yAxis)\r\n                .call(d3.axisLeft(y));\r\n            if (yAxisOptions.tick === false) {\r\n                d3.selectAll(\".lineChart\" + title + \" g .yAxis \").style(\"display\", \"none\");\r\n            }\r\n            if (yAxisOptions.domain === false) {\r\n                d3.selectAll(\".lineChart\" + title + \" g .yAxis .domain\").style(\"display\", \"none\");\r\n            }\r\n            if (yAxisOptions.lines === true) {\r\n                d3.selectAll(\".lineChart\" + title + \" g .yAxis .tick\").style(\"display\", \"block\");\r\n                d3.selectAll(\".lineChart\" + title + \" g .yAxis .tick line\").attr(\"x2\", (width));\r\n            }\r\n        }\r\n        var linePath = parentGroup.selectAll(\".linePath\").data([0]);\r\n        linePath.exit().remove();\r\n        linePath.enter().append(\"path\")\r\n            .attr(\"class\", \"linePath\")\r\n            .merge(linePath)\r\n            .call(transition)\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke-width\", 2)\r\n            .attr(\"stroke\", \"black\")\r\n            .attr(\"id\", function (d, i) { return \"path\" + i; })\r\n            .attr(\"d\", valueline(data));\r\n        function transition(path) {\r\n            path\r\n                .transition()\r\n                .duration(1700)\r\n                .attrTween(\"stroke-dasharray\", tweenDash);\r\n        }\r\n        function tweenDash() {\r\n            var l = this.getTotalLength(),\r\n                i = d3.interpolateString(\"0,\" + l, l + \",\" + l);\r\n            return function (t) { return i(t); };\r\n        }\r\n        var dot = parentGroup.selectAll(\".dot\")\r\n            .data(data)\r\n        dot.exit().remove();\r\n        dot.enter().append(\"circle\")\r\n            .attr(\"class\", \"dot\")\r\n            .merge(dot)\r\n            .attr(\"cx\", function (d, i) { return x(d.key) })\r\n            .attr(\"cy\", function (d, i) { return y(d.value) })\r\n            .attr(\"fill\", colors[0])\r\n            .attr(\"r\", 5)\r\n            .on('mousemove', function (d) {\r\n                if (tooltip === true) {\r\n                    tooltipLineChart.style('top', (d3.event.pageY - 70) + 'px')\r\n                        .style('left', (d3.event.pageX - 150) + 'px')\r\n                        .style(\"display\", \"block\")\r\n                        // .style(\"position\", \"absolute\")\r\n                        .html(\"Key: \" + (d.key) + \"<br>Value: \" + (d.value));\r\n                }\r\n            })\r\n            .on('mouseout', function (d) { tooltipLineChart.style(\"display\", \"none\") });\r\n    }\r\n    render() {\r\n        return (<svg ref={node => (this.node = node)} />);\r\n    }\r\n}\r\n\r\nexport default LineChart;\r\n","import React from 'react';\r\nimport * as d3 from 'd3';\r\nimport { event } from 'd3';\r\nimport './liquidFilledGauge-styles.css';\r\n\r\nclass LiquidFilledGauge extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.createLiquidFilledGauge = this.createLiquidFilledGauge.bind(this);\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.createLiquidFilledGauge();\r\n    }\r\n\r\n    createLiquidFilledGauge() {\r\n        let data = this.props.data;\r\n        let tooltipData = this.props.data;\r\n        var defaultOptions = {\r\n            title: \"defaultTitle\",\r\n            tooltip: true,\r\n            svgClass: 'classFromOption',\r\n            svgId: 'idFromOption',\r\n            width: 300,\r\n            height: 250,\r\n            margin: {\r\n                top: 20,\r\n                right: 30,\r\n                bottom: 20,\r\n                left: 30\r\n            }\r\n        }\r\n        let options = this.props.options || defaultOptions;\r\n        let node = this.node;\r\n        let width = options.width;\r\n        let height = options.height;\r\n        var margin = {\r\n            top: options.margin !== undefined ? options.margin.top : defaultOptions.margin.top,\r\n            right: options.margin !== undefined ? options.margin.right : defaultOptions.margin.right,\r\n            bottom: options.margin !== undefined ? options.margin.bottom : defaultOptions.margin.bottom,\r\n            left: options.margin !== undefined ? options.margin.left : defaultOptions.margin.left\r\n        };\r\n        var svg = d3.select(node).append(\"svg\")\r\n            .attr(\"class\", \"liquidFilledGaugeSvg \" + options.svgClass)\r\n            .attr(\"id\", options.svgId)\r\n        // svg.attr(\"viewBox\", \"-60 -10 \" + (width + margin.left + margin.right) + \" \" + (height + margin.top + margin.bottom) + \"\")\r\n        svg.attr(\"viewBox\", \"-100 -75 530 400\")\r\n\r\n        var config = liquidFillGaugeDefaultSettings();\r\n        config.circleColor = \"#D4AB6A\";\r\n        config.textColor = \"#553300\";\r\n        config.waveTextColor = \"#805615\";\r\n        config.waveColor = \"#AA7D39\";\r\n        config.circleThickness = 0.2;\r\n        config.textVertPosition = 0.2;\r\n        config.waveAnimateTime = 1000;\r\n\r\n        loadLiquidFillGauge(\"liquidFilledGaugeSvg\", data, config);\r\n\r\n        function liquidFillGaugeDefaultSettings() {\r\n            return {\r\n                // tooltip:this.props.tooltip,\r\n                minValue: 0, // The gauge minimum value.\r\n                maxValue: 100, // The gauge maximum value.\r\n                circleThickness: 0.009, // The outer circle thickness as a percentage of it's radius.\r\n                circleFillGap: 0.01, // The size of the gap between the outer circle and wave circle as a percentage of the outer circles radius.\r\n                circleColor: \"#178BCA\", // The color of the outer circle.\r\n                circleFill: '#fff', // The fill color of the circle.  Can be set to \"transparent\"\r\n                waveHeight: 0.05, // The wave height as a percentage of the radius of the wave circle.\r\n                waveCount: 1, // The number of full waves per width of the wave circle.\r\n                waveRiseTime: 1000, // The amount of time in milliseconds for the wave to rise from 0 to it's final height.\r\n                waveAnimateTime: 18000, // The amount of time in milliseconds for a full wave to enter the wave circle.\r\n                waveRise: true, // Control if the wave should rise from 0 to it's full height, or start at it's full height.\r\n                waveHeightScaling: true, // Controls wave size scaling at low and high fill percentages. When true, wave height reaches it's maximum at 50% fill, and minimum at 0% and 100% fill. This helps to prevent the wave from making the wave circle from appear totally full or empty when near it's minimum or maximum fill.\r\n                waveAnimate: true, // Controls if the wave scrolls or is static.\r\n                waveColor: \"#178BCA\", // The color of the fill wave.\r\n                waveOffset: 0, // The amount to initially offset the wave. 0 = no offset. 1 = offset of one full wave.\r\n                textVertPosition: 0.5, // The height at which to display the percentage text withing the wave circle. 0 = bottom, 1 = top.\r\n                textSize: 1, // The relative height of the text to display in the wave circle. 1 = 50%\r\n                valueCountUp: true, // If true, the displayed value counts up from 0 to it's final value upon loading. If false, the final value is displayed.\r\n                displayPercent: true, // If true, a % symbol is displayed after the value.\r\n                textColor: \"#045681\", // The color of the value text when the wave does not overlap it.\r\n                waveTextColor: \"#A4DBf8\" // The color of the value text when the wave overlaps it.\r\n            };\r\n        }\r\n\r\n        function loadLiquidFillGauge(elementId, value, config) {\r\n            if (config == null) config = liquidFillGaugeDefaultSettings();\r\n            // var gauge = d3.select(\".\" + elementId);\r\n            // var radius = Math.min(parseInt(svg.style(\"width\")), parseInt(svg.style(\"height\"))) / 2;\r\n            var radius = 200;\r\n            var locationX = width / 2 - radius;\r\n            var locationY = height / 2 - radius;\r\n            // var locationX = parseInt(svg.style(\"width\")) / 2 - radius;\r\n            // var locationY = parseInt(svg.style(\"height\")) / 2 - radius;\r\n            var fillPercent = Math.max(config.minValue, Math.min(config.maxValue, value)) / config.maxValue;\r\n            var waveHeightScale;\r\n            if (config.waveHeightScaling) {\r\n                waveHeightScale = d3.scaleLinear()\r\n                    .range([0, config.waveHeight, 0])\r\n                    .domain([0, 50, 100]);\r\n            } else {\r\n                waveHeightScale = d3.scaleLinear()\r\n                    .range([config.waveHeight, config.waveHeight])\r\n                    .domain([0, 100]);\r\n            }\r\n            var textPixels = (config.textSize * radius / 2);\r\n            var textFinalValue = parseFloat(value).toFixed(2);\r\n            var textStartValue = config.valueCountUp ? config.minValue : textFinalValue;\r\n            var percentText = config.displayPercent ? \"%\" : \"\";\r\n            var circleThickness = config.circleThickness * radius;\r\n            var circleFillGap = config.circleFillGap * radius;\r\n            var fillCircleMargin = circleThickness + circleFillGap;\r\n            var fillCircleRadius = radius - fillCircleMargin;\r\n            var waveHeight = fillCircleRadius * waveHeightScale(fillPercent * 100);\r\n            var waveLength = fillCircleRadius * 2 / config.waveCount;\r\n            var waveClipCount = 1 + config.waveCount;\r\n            var waveClipWidth = waveLength * waveClipCount;\r\n\r\n            // Rounding functions so that the correct number of decimal places is always displayed as the value counts up.\r\n            var textRounder = function (value) { return Math.round(value); };\r\n            if (parseFloat(textFinalValue) !== parseFloat(textRounder(textFinalValue))) {\r\n                textRounder = function (value) { return parseFloat(value).toFixed(1); };\r\n            }\r\n            if (parseFloat(textFinalValue) !== parseFloat(textRounder(textFinalValue))) {\r\n                textRounder = function (value) { return parseFloat(value).toFixed(2); };\r\n            }\r\n\r\n            // Data for building the clip wave area.\r\n            var data = [];\r\n            for (var i = 0; i <= 40 * waveClipCount; i++) {\r\n                data.push({ x: i / (40 * waveClipCount), y: (i / (40)) });\r\n            }\r\n\r\n            // Scales for drawing the outer circle.\r\n            var gaugeCircleX = d3.scaleLinear().range([0, 2 * Math.PI]).domain([0, 1]);\r\n            var gaugeCircleY = d3.scaleLinear().range([0, radius]).domain([0, radius]);\r\n\r\n            // Scales for controlling the size of the clipping path.\r\n            var waveScaleX = d3.scaleLinear().range([0, waveClipWidth]).domain([0, 1]);\r\n            var waveScaleY = d3.scaleLinear().range([0, waveHeight]).domain([0, 1]);\r\n\r\n            // Scales for controlling the position of the clipping path.\r\n            var waveRiseScale = d3.scaleLinear()\r\n                // The clipping area size is the height of the fill circle + the wave height, so we position the clip wave\r\n                // such that the it will overlap the fill circle at all when at 0%, and will totally cover the fill\r\n                // circle at 100%.\r\n                .range([(fillCircleMargin + fillCircleRadius * 2 + waveHeight), (fillCircleMargin - waveHeight)])\r\n                .domain([0, 1]);\r\n\r\n            var waveAnimateScale = d3.scaleLinear()\r\n                .range([0, waveClipWidth - fillCircleRadius * 2]) // Push the clip area one full wave then snap back.\r\n                .domain([0, 1]);\r\n\r\n            // Scale for controlling the position of the text within the gauge.\r\n            var textRiseScaleY = d3.scaleLinear()\r\n                .range([fillCircleMargin + fillCircleRadius * 2, (fillCircleMargin + textPixels * 0.7)])\r\n                .domain([0, 1]);\r\n\r\n            // Center the gauge within the parent SVG.\r\n            var gaugeGroup = svg.append(\"g\")\r\n                .attr('transform', 'translate(' + locationX + ',' + locationY + ')')\r\n                .on('mouseover', function (d, i) {\r\n                    if (options.tooltip) {\r\n                        tooltip\r\n                            .style('top', (event.pageY - 50) + 'px')\r\n                            .style('left', (event.pageX - 50) + 'px')\r\n                            .style(\"display\", \"block\")\r\n                            .html(\"Value: \" + tooltipData);\r\n                    }\r\n                })\r\n\r\n                .on('mousemove', function (d, i) {\r\n                    if (options.tooltip) {\r\n                        tooltip\r\n                            .style('top', (event.pageY - 50) + 'px')\r\n                            .style('left', (event.pageX - 50) + 'px')\r\n                            .style(\"display\", \"block\")\r\n                            .html(\"Value: \" + tooltipData);\r\n                    }\r\n                })\r\n                .on('mouseout', function (d, i) {\r\n                    tooltip.style(\"display\", \"none\")\r\n                });\r\n\r\n            var tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltipLiquidFilled\");\r\n\r\n            // Draw the fill circle\r\n            gaugeGroup.append(\"circle\")\r\n                .attr(\"cx\", radius)\r\n                .attr(\"cy\", radius)\r\n                .attr(\"r\", radius)\r\n                .attr(\"class\", \"fill\")\r\n                .style(\"fill\", config.circleFill);\r\n\r\n            // Draw the outer circle.\r\n            var gaugeStrokeArc = d3.arc()\r\n                .startAngle(gaugeCircleX(0))\r\n                .endAngle(gaugeCircleX(1))\r\n                .outerRadius(gaugeCircleY(radius))\r\n                .innerRadius(gaugeCircleY(radius - circleThickness));\r\n            gaugeGroup.append(\"path\")\r\n                .attr(\"d\", gaugeStrokeArc)\r\n                .attr(\"class\", \"stroke\")\r\n                .style(\"fill\", config.circleColor)\r\n                .attr('transform', 'translate(' + radius + ',' + radius + ')');\r\n\r\n            // Text where the wave does not overlap.\r\n            var text1 = gaugeGroup.append(\"text\")\r\n                .text(textRounder(textStartValue) + percentText)\r\n                .attr(\"class\", \"liquidFillGaugeText\")\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .attr(\"font-size\", textPixels + \"px\")\r\n                .style(\"fill\", config.textColor)\r\n                .attr('transform', 'translate(' + radius + ',' + textRiseScaleY(config.textVertPosition) + ')');\r\n\r\n            // The clipping wave area.\r\n            var clipArea = d3.area()\r\n                .x(function (d) { return waveScaleX(d.x); })\r\n                .y0(function (d) { return waveScaleY(Math.sin(Math.PI * 2 * config.waveOffset * -1 + Math.PI * 2 * (1 - config.waveCount) + d.y * 2 * Math.PI)); })\r\n                .y1(function (d) { return (fillCircleRadius * 2 + waveHeight); });\r\n\r\n            var waveGroup = gaugeGroup.append(\"defs\")\r\n                .append(\"clipPath\")\r\n                .attr(\"id\", \"clipWave\" + elementId);\r\n            var wave = waveGroup.append(\"path\")\r\n                .datum(data)\r\n                .attr(\"d\", clipArea)\r\n                .attr(\"T\", 0);\r\n\r\n            // The inner circle with the clipping wave attached.\r\n            var fillCircleGroup = gaugeGroup.append(\"g\")\r\n                .attr(\"clip-path\", \"url(#clipWave\" + elementId + \")\");\r\n            fillCircleGroup.append(\"circle\")\r\n                .attr(\"cx\", radius)\r\n                .attr(\"cy\", radius)\r\n                .attr(\"r\", fillCircleRadius)\r\n                .style(\"fill\", config.waveColor);\r\n\r\n            // Text where the wave does overlap.\r\n            var text2 = fillCircleGroup.append(\"text\")\r\n                .text(textRounder(textStartValue) + percentText)\r\n                .attr(\"class\", \"liquidFillGaugeText\")\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .attr(\"font-size\", textPixels + \"px\")\r\n                .style(\"fill\", config.waveTextColor)\r\n                .attr('transform', 'translate(' + radius + ',' + textRiseScaleY(config.textVertPosition) + ')');\r\n            // Make the value count up.\r\n            if (config.valueCountUp) {\r\n                var textTween = function () {\r\n                    var i = d3.interpolate(this.textContent, textFinalValue);\r\n                    var myText = d3.select(this);\r\n                    return function (t) {\r\n                        myText.text(textRounder(i(t)) + percentText);\r\n                    };\r\n                };\r\n                text1.transition()\r\n                    .duration(config.waveRiseTime)\r\n                    .tween(\"text\", textTween);\r\n                text2.transition()\r\n                    .duration(config.waveRiseTime)\r\n                    .tween(\"text\", textTween);\r\n            }\r\n            // Make the wave rise. wave and waveGroup are separate so that horizontal and vertical movement can be controlled independently.\r\n            var waveGroupXPosition = fillCircleMargin + fillCircleRadius * 2 - waveClipWidth;\r\n            if (config.waveRise) {\r\n                waveGroup.attr('transform', 'translate(' + waveGroupXPosition + ',' + waveRiseScale(0) + ')')\r\n                    .transition()\r\n                    .duration(config.waveRiseTime)\r\n                    .attr('transform', 'translate(' + waveGroupXPosition + ',' + waveRiseScale(fillPercent) + ')')\r\n                    .on(\"start\", function () { wave.attr('transform', 'translate(1,0)'); }); // This transform is necessary to get the clip wave positioned correctly when waveRise=true and waveAnimate=false. The wave will not position correctly without this, but it's not clear why this is actually necessary.\r\n            } else {\r\n                waveGroup.attr('transform', 'translate(' + waveGroupXPosition + ',' + waveRiseScale(fillPercent) + ')');\r\n            }\r\n            if (config.waveAnimate) animateWave();\r\n            function animateWave() {\r\n                wave.attr('transform', 'translate(' + waveAnimateScale(wave.attr('T')) + ',0)');\r\n                wave.transition()\r\n                    .duration(config.waveAnimateTime * (1 - wave.attr('T')))\r\n                    .ease(d3.easeLinear)\r\n                    .attr('transform', 'translate(' + waveAnimateScale(1) + ',0)')\r\n                    .attr('T', 1)\r\n                    .on('end', function () {\r\n                        wave.attr('T', 0);\r\n                        animateWave(config.waveAnimateTime);\r\n                    });\r\n            }\r\n            function GaugeUpdater() {\r\n                this.update = function (value) {\r\n                    var newFinalValue = parseFloat(value).toFixed(2);\r\n                    var textRounderUpdater = function (value) { return Math.round(value); };\r\n                    if (parseFloat(newFinalValue) !== parseFloat(textRounderUpdater(newFinalValue))) {\r\n                        textRounderUpdater = function (value) { return parseFloat(value).toFixed(1); };\r\n                    }\r\n                    if (parseFloat(newFinalValue) !== parseFloat(textRounderUpdater(newFinalValue))) {\r\n                        textRounderUpdater = function (value) { return parseFloat(value).toFixed(2); };\r\n                    }\r\n                    var textTween = function () {\r\n                        var i = d3.interpolate(this.textContent, parseFloat(value).toFixed(2));\r\n                        var myText = d3.select(this);\r\n                        return function (t) {\r\n                            myText.text(textRounder(i(t)) + percentText);\r\n                        };\r\n                    };\r\n                    text1.transition()\r\n                        .duration(config.waveRiseTime)\r\n                        .tween(\"text\", textTween);\r\n                    text2.transition()\r\n                        .duration(config.waveRiseTime)\r\n                        .tween(\"text\", textTween);\r\n                    var fillPercent = Math.max(config.minValue, Math.min(config.maxValue, value)) / config.maxValue;\r\n                    var waveHeight = fillCircleRadius * waveHeightScale(fillPercent * 100);\r\n                    var waveRiseScale = d3.scaleLinear()\r\n                        // The clipping area size is the height of the fill circle + the wave height, so we position the clip wave\r\n                        // such that the it will overlap the fill circle at all when at 0%, and will totally cover the fill\r\n                        // circle at 100%.\r\n                        .range([(fillCircleMargin + fillCircleRadius * 2 + waveHeight), (fillCircleMargin - waveHeight)])\r\n                        .domain([0, 1]);\r\n                    var newHeight = waveRiseScale(fillPercent);\r\n                    var waveScaleX = d3.scaleLinear().range([0, waveClipWidth]).domain([0, 1]);\r\n                    var waveScaleY = d3.scaleLinear().range([0, waveHeight]).domain([0, 1]);\r\n                    var newClipArea;\r\n                    if (config.waveHeightScaling) {\r\n                        newClipArea = d3.area()\r\n                            .x(function (d) { return waveScaleX(d.x); })\r\n                            .y0(function (d) { return waveScaleY(Math.sin(Math.PI * 2 * config.waveOffset * -1 + Math.PI * 2 * (1 - config.waveCount) + d.y * 2 * Math.PI)); })\r\n                            .y1(function (d) { return (fillCircleRadius * 2 + waveHeight); });\r\n                    } else {\r\n                        newClipArea = clipArea;\r\n                    }\r\n                    var newWavePosition = config.waveAnimate ? waveAnimateScale(1) : 0;\r\n                    wave.transition()\r\n                        .duration(0)\r\n                        .transition()\r\n                        .duration(config.waveAnimate ? (config.waveAnimateTime * (1 - wave.attr('T'))) : (config.waveRiseTime))\r\n                        .ease(d3.easeLinear)\r\n                        .attr('d', newClipArea)\r\n                        .attr('transform', 'translate(' + newWavePosition + ',0)')\r\n                        .attr('T', '1')\r\n                        .on(\"end\", function () {\r\n                            if (config.waveAnimate) {\r\n                                wave.attr('transform', 'translate(' + waveAnimateScale(0) + ',0)');\r\n                                animateWave(config.waveAnimateTime);\r\n                            }\r\n                        });\r\n                    waveGroup.transition()\r\n                        .duration(config.waveRiseTime)\r\n                        .attr('transform', 'translate(' + waveGroupXPosition + ',' + newHeight + ')')\r\n                };\r\n            }\r\n            return new GaugeUpdater();\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div ref={node => (this.node = node)} ></div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default LiquidFilledGauge;","import React from 'react';\r\nimport * as d3 from 'd3';\r\nimport { event } from 'd3';\r\nimport './liquidFilledGauge-styles.css';\r\n\r\nclass LiquidFilledGaugeThree extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.createLiquidFilledGauge = this.createLiquidFilledGauge.bind(this);\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.createLiquidFilledGauge();\r\n    }\r\n\r\n    createLiquidFilledGauge() {\r\n        let data = this.props.data;\r\n        let tooltipData = this.props.data;\r\n        var defaultOptions = {\r\n            title: \"defaultTitle\",\r\n            tooltip: true,\r\n            svgClass: 'classFromOption',\r\n            svgId: 'idFromOption',\r\n            width: 300,\r\n            height: 250,\r\n            margin: {\r\n                top: 20,\r\n                right: 30,\r\n                bottom: 20,\r\n                left: 30\r\n            }\r\n        }\r\n        let options = this.props.options || defaultOptions;\r\n        let node = this.node;\r\n        let width = options.width;\r\n        let height = options.height;\r\n        // var margin = {\r\n        //     top: options.margin !== undefined ? options.margin.top : defaultOptions.margin.top,\r\n        //     right: options.margin !== undefined ? options.margin.right : defaultOptions.margin.right,\r\n        //     bottom: options.margin !== undefined ? options.margin.bottom : defaultOptions.margin.bottom,\r\n        //     left: options.margin !== undefined ? options.margin.left : defaultOptions.margin.left\r\n        // };\r\n        var svg = d3.select(node).append(\"svg\")\r\n            .attr(\"class\", \"liquidFilledGaugeSvgThree \" + options.svgClass)\r\n            .attr(\"id\", options.svgId)\r\n        // svg.attr(\"viewBox\", \"-60 -10 \" + (width + margin.left + margin.right) + \" \" + (height + margin.top + margin.bottom) + \"\")\r\n        svg.attr(\"viewBox\", \"-100 -75 530 400\")\r\n\r\n        var config = liquidFillGaugeDefaultSettings();\r\n        config.circleColor = \"#f88c90\";\r\n        config.textColor = \"#553300\";\r\n        config.waveTextColor = \"#805615\";\r\n        config.waveColor = \"#f44349\";\r\n        config.circleThickness = 0.2;\r\n        config.textVertPosition = 0.2;\r\n        config.waveAnimateTime = 1000;\r\n\r\n        loadLiquidFillGauge(\"liquidFilledGaugeSvgThree\", data, config);\r\n\r\n        function liquidFillGaugeDefaultSettings() {\r\n            return {\r\n                // tooltip:this.props.tooltip,\r\n                minValue: 0, // The gauge minimum value.\r\n                maxValue: 100, // The gauge maximum value.\r\n                circleThickness: 0.05, // The outer circle thickness as a percentage of it's radius.\r\n                circleFillGap: 0.05, // The size of the gap between the outer circle and wave circle as a percentage of the outer circles radius.\r\n                circleColor: \"#aa6f73\", // The color of the outer circle.\r\n                circleFill: '#fff', // The fill color of the circle.  Can be set to \"transparent\"\r\n                waveHeight: 0.05, // The wave height as a percentage of the radius of the wave circle.\r\n                waveCount: 1, // The number of full waves per width of the wave circle.\r\n                waveRiseTime: 1000, // The amount of time in milliseconds for the wave to rise from 0 to it's final height.\r\n                waveAnimateTime: 18000, // The amount of time in milliseconds for a full wave to enter the wave circle.\r\n                waveRise: true, // Control if the wave should rise from 0 to it's full height, or start at it's full height.\r\n                waveHeightScaling: true, // Controls wave size scaling at low and high fill percentages. When true, wave height reaches it's maximum at 50% fill, and minimum at 0% and 100% fill. This helps to prevent the wave from making the wave circle from appear totally full or empty when near it's minimum or maximum fill.\r\n                waveAnimate: true, // Controls if the wave scrolls or is static.\r\n                waveColor: \"#178BCA\", // The color of the fill wave.\r\n                waveOffset: 0, // The amount to initially offset the wave. 0 = no offset. 1 = offset of one full wave.\r\n                textVertPosition: 0.5, // The height at which to display the percentage text withing the wave circle. 0 = bottom, 1 = top.\r\n                textSize: 1, // The relative height of the text to display in the wave circle. 1 = 50%\r\n                valueCountUp: true, // If true, the displayed value counts up from 0 to it's final value upon loading. If false, the final value is displayed.\r\n                displayPercent: true, // If true, a % symbol is displayed after the value.\r\n                textColor: \"#045681\", // The color of the value text when the wave does not overlap it.\r\n                waveTextColor: \"#A4DBf8\" // The color of the value text when the wave overlaps it.\r\n            };\r\n        }\r\n\r\n        function loadLiquidFillGauge(elementId, value, config) {\r\n            if (config == null) config = liquidFillGaugeDefaultSettings();\r\n            // var gauge = d3.select(\".\" + elementId);\r\n            // var radius = Math.min(parseInt(svg.style(\"width\")), parseInt(svg.style(\"height\"))) / 2;\r\n            var radius = 200;\r\n            var locationX = width / 2 - radius;\r\n            var locationY = height / 2 - radius;\r\n            // var locationX = parseInt(svg.style(\"width\")) / 2 - radius;\r\n            // var locationY = parseInt(svg.style(\"height\")) / 2 - radius;\r\n            var fillPercent = Math.max(config.minValue, Math.min(config.maxValue, value)) / config.maxValue;\r\n            var waveHeightScale;\r\n            if (config.waveHeightScaling) {\r\n                waveHeightScale = d3.scaleLinear()\r\n                    .range([0, config.waveHeight, 0])\r\n                    .domain([0, 50, 100]);\r\n            } else {\r\n                waveHeightScale = d3.scaleLinear()\r\n                    .range([config.waveHeight, config.waveHeight])\r\n                    .domain([0, 100]);\r\n            }\r\n            var textPixels = (config.textSize * radius / 2);\r\n            var textFinalValue = parseFloat(value).toFixed(2);\r\n            var textStartValue = config.valueCountUp ? config.minValue : textFinalValue;\r\n            var percentText = config.displayPercent ? \"%\" : \"\";\r\n            var circleThickness = config.circleThickness * radius;\r\n            var circleFillGap = config.circleFillGap * radius;\r\n            var fillCircleMargin = circleThickness + circleFillGap;\r\n            var fillCircleRadius = radius - fillCircleMargin;\r\n            var waveHeight = fillCircleRadius * waveHeightScale(fillPercent * 100);\r\n            var waveLength = fillCircleRadius * 2 / config.waveCount;\r\n            var waveClipCount = 1 + config.waveCount;\r\n            var waveClipWidth = waveLength * waveClipCount;\r\n\r\n            // Rounding functions so that the correct number of decimal places is always displayed as the value counts up.\r\n            var textRounder = function (value) { return Math.round(value); };\r\n            if (parseFloat(textFinalValue) !== parseFloat(textRounder(textFinalValue))) {\r\n                textRounder = function (value) { return parseFloat(value).toFixed(1); };\r\n            }\r\n            if (parseFloat(textFinalValue) !== parseFloat(textRounder(textFinalValue))) {\r\n                textRounder = function (value) { return parseFloat(value).toFixed(2); };\r\n            }\r\n\r\n            // Data for building the clip wave area.\r\n            var data = [];\r\n            for (var i = 0; i <= 40 * waveClipCount; i++) {\r\n                data.push({ x: i / (40 * waveClipCount), y: (i / (40)) });\r\n            }\r\n\r\n            // Scales for drawing the outer circle.\r\n            var gaugeCircleX = d3.scaleLinear().range([0, 2 * Math.PI]).domain([0, 1]);\r\n            var gaugeCircleY = d3.scaleLinear().range([0, radius]).domain([0, radius]);\r\n\r\n            // Scales for controlling the size of the clipping path.\r\n            var waveScaleX = d3.scaleLinear().range([0, waveClipWidth]).domain([0, 1]);\r\n            var waveScaleY = d3.scaleLinear().range([0, waveHeight]).domain([0, 1]);\r\n\r\n            // Scales for controlling the position of the clipping path.\r\n            var waveRiseScale = d3.scaleLinear()\r\n                // The clipping area size is the height of the fill circle + the wave height, so we position the clip wave\r\n                // such that the it will overlap the fill circle at all when at 0%, and will totally cover the fill\r\n                // circle at 100%.\r\n                .range([(fillCircleMargin + fillCircleRadius * 2 + waveHeight), (fillCircleMargin - waveHeight)])\r\n                .domain([0, 1]);\r\n\r\n            var waveAnimateScale = d3.scaleLinear()\r\n                .range([0, waveClipWidth - fillCircleRadius * 2]) // Push the clip area one full wave then snap back.\r\n                .domain([0, 1]);\r\n\r\n            // Scale for controlling the position of the text within the gauge.\r\n            var textRiseScaleY = d3.scaleLinear()\r\n                .range([fillCircleMargin + fillCircleRadius * 2, (fillCircleMargin + textPixels * 0.7)])\r\n                .domain([0, 1]);\r\n\r\n            // Center the gauge within the parent SVG.\r\n            var gaugeGroup = svg.append(\"g\")\r\n                .attr('transform', 'translate(' + locationX + ',' + locationY + ')')\r\n                .on('mouseover', function (d, i) {\r\n                    if (options.tooltip) {\r\n                        tooltip\r\n                            .style('top', (event.pageY - 50) + 'px')\r\n                            .style('left', (event.pageX - 50) + 'px')\r\n                            .style(\"display\", \"block\")\r\n                            .html(\"Value: \" + tooltipData);\r\n                    }\r\n                })\r\n\r\n                .on('mousemove', function (d, i) {\r\n                    if (options.tooltip) {\r\n                        tooltip\r\n                            .style('top', (event.pageY - 50) + 'px')\r\n                            .style('left', (event.pageX - 50) + 'px')\r\n                            .style(\"display\", \"block\")\r\n                            .html(\"Value: \" + tooltipData);\r\n                    }\r\n                })\r\n                .on('mouseout', function (d, i) {\r\n                    tooltip.style(\"display\", \"none\")\r\n                });\r\n\r\n            var tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltipLiquidFilled\");\r\n\r\n            // Draw the fill circle\r\n            gaugeGroup.append(\"circle\")\r\n                .attr(\"cx\", radius)\r\n                .attr(\"cy\", radius)\r\n                .attr(\"r\", radius)\r\n                .attr(\"class\", \"fill\")\r\n                .style(\"fill\", config.circleFill);\r\n\r\n            // Draw the outer circle.\r\n            var gaugeStrokeArc = d3.arc()\r\n                .startAngle(gaugeCircleX(0))\r\n                .endAngle(gaugeCircleX(1))\r\n                .outerRadius(gaugeCircleY(radius))\r\n                .innerRadius(gaugeCircleY(radius - circleThickness));\r\n            gaugeGroup.append(\"path\")\r\n                .attr(\"d\", gaugeStrokeArc)\r\n                .attr(\"class\", \"stroke\")\r\n                .style(\"fill\", config.circleColor)\r\n                .attr('transform', 'translate(' + radius + ',' + radius + ')');\r\n\r\n            // Text where the wave does not overlap.\r\n            var text1 = gaugeGroup.append(\"text\")\r\n                .text(textRounder(textStartValue) + percentText)\r\n                .attr(\"class\", \"liquidFillGaugeText\")\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .attr(\"font-size\", textPixels + \"px\")\r\n                .style(\"fill\", config.textColor)\r\n                .attr('transform', 'translate(' + radius + ',' + textRiseScaleY(config.textVertPosition) + ')');\r\n\r\n            // The clipping wave area.\r\n            var clipArea = d3.area()\r\n                .x(function (d) { return waveScaleX(d.x); })\r\n                .y0(function (d) { return waveScaleY(Math.sin(Math.PI * 2 * config.waveOffset * -1 + Math.PI * 2 * (1 - config.waveCount) + d.y * 2 * Math.PI)); })\r\n                .y1(function (d) { return (fillCircleRadius * 2 + waveHeight); });\r\n\r\n            var waveGroup = gaugeGroup.append(\"defs\")\r\n                .append(\"clipPath\")\r\n                .attr(\"id\", \"clipWave\" + elementId);\r\n            var wave = waveGroup.append(\"path\")\r\n                .datum(data)\r\n                .attr(\"d\", clipArea)\r\n                .attr(\"T\", 0);\r\n\r\n            // The inner circle with the clipping wave attached.\r\n            var fillCircleGroup = gaugeGroup.append(\"g\")\r\n                .attr(\"clip-path\", \"url(#clipWave\" + elementId + \")\");\r\n            fillCircleGroup.append(\"circle\")\r\n                .attr(\"cx\", radius)\r\n                .attr(\"cy\", radius)\r\n                .attr(\"r\", fillCircleRadius)\r\n                .style(\"fill\", config.waveColor);\r\n\r\n            // Text where the wave does overlap.\r\n            var text2 = fillCircleGroup.append(\"text\")\r\n                .text(textRounder(textStartValue) + percentText)\r\n                .attr(\"class\", \"liquidFillGaugeText\")\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .attr(\"font-size\", textPixels + \"px\")\r\n                .style(\"fill\", config.waveTextColor)\r\n                .attr('transform', 'translate(' + radius + ',' + textRiseScaleY(config.textVertPosition) + ')');\r\n            // Make the value count up.\r\n            if (config.valueCountUp) {\r\n                var textTween = function () {\r\n                    var i = d3.interpolate(this.textContent, textFinalValue);\r\n                    var myText = d3.select(this);\r\n                    return function (t) {\r\n                        myText.text(textRounder(i(t)) + percentText);\r\n                    };\r\n                };\r\n                text1.transition()\r\n                    .duration(config.waveRiseTime)\r\n                    .tween(\"text\", textTween);\r\n                text2.transition()\r\n                    .duration(config.waveRiseTime)\r\n                    .tween(\"text\", textTween);\r\n            }\r\n            // Make the wave rise. wave and waveGroup are separate so that horizontal and vertical movement can be controlled independently.\r\n            var waveGroupXPosition = fillCircleMargin + fillCircleRadius * 2 - waveClipWidth;\r\n            if (config.waveRise) {\r\n                waveGroup.attr('transform', 'translate(' + waveGroupXPosition + ',' + waveRiseScale(0) + ')')\r\n                    .transition()\r\n                    .duration(config.waveRiseTime)\r\n                    .attr('transform', 'translate(' + waveGroupXPosition + ',' + waveRiseScale(fillPercent) + ')')\r\n                    .on(\"start\", function () { wave.attr('transform', 'translate(1,0)'); }); // This transform is necessary to get the clip wave positioned correctly when waveRise=true and waveAnimate=false. The wave will not position correctly without this, but it's not clear why this is actually necessary.\r\n            } else {\r\n                waveGroup.attr('transform', 'translate(' + waveGroupXPosition + ',' + waveRiseScale(fillPercent) + ')');\r\n            }\r\n            if (config.waveAnimate) animateWave();\r\n            function animateWave() {\r\n                wave.attr('transform', 'translate(' + waveAnimateScale(wave.attr('T')) + ',0)');\r\n                wave.transition()\r\n                    .duration(config.waveAnimateTime * (1 - wave.attr('T')))\r\n                    .ease(d3.easeLinear)\r\n                    .attr('transform', 'translate(' + waveAnimateScale(1) + ',0)')\r\n                    .attr('T', 1)\r\n                    .on('end', function () {\r\n                        wave.attr('T', 0);\r\n                        animateWave(config.waveAnimateTime);\r\n                    });\r\n            }\r\n            function GaugeUpdater() {\r\n                this.update = function (value) {\r\n                    var newFinalValue = parseFloat(value).toFixed(2);\r\n                    var textRounderUpdater = function (value) { return Math.round(value); };\r\n                    if (parseFloat(newFinalValue) !== parseFloat(textRounderUpdater(newFinalValue))) {\r\n                        textRounderUpdater = function (value) { return parseFloat(value).toFixed(1); };\r\n                    }\r\n                    if (parseFloat(newFinalValue) !== parseFloat(textRounderUpdater(newFinalValue))) {\r\n                        textRounderUpdater = function (value) { return parseFloat(value).toFixed(2); };\r\n                    }\r\n                    var textTween = function () {\r\n                        var i = d3.interpolate(this.textContent, parseFloat(value).toFixed(2));\r\n                        var myText = d3.select(this);\r\n                        return function (t) {\r\n                            myText.text(textRounder(i(t)) + percentText);\r\n                        };\r\n                    };\r\n                    text1.transition()\r\n                        .duration(config.waveRiseTime)\r\n                        .tween(\"text\", textTween);\r\n                    text2.transition()\r\n                        .duration(config.waveRiseTime)\r\n                        .tween(\"text\", textTween);\r\n                    var fillPercent = Math.max(config.minValue, Math.min(config.maxValue, value)) / config.maxValue;\r\n                    var waveHeight = fillCircleRadius * waveHeightScale(fillPercent * 100);\r\n                    var waveRiseScale = d3.scaleLinear()\r\n                        // The clipping area size is the height of the fill circle + the wave height, so we position the clip wave\r\n                        // such that the it will overlap the fill circle at all when at 0%, and will totally cover the fill\r\n                        // circle at 100%.\r\n                        .range([(fillCircleMargin + fillCircleRadius * 2 + waveHeight), (fillCircleMargin - waveHeight)])\r\n                        .domain([0, 1]);\r\n                    var newHeight = waveRiseScale(fillPercent);\r\n                    var waveScaleX = d3.scaleLinear().range([0, waveClipWidth]).domain([0, 1]);\r\n                    var waveScaleY = d3.scaleLinear().range([0, waveHeight]).domain([0, 1]);\r\n                    var newClipArea;\r\n                    if (config.waveHeightScaling) {\r\n                        newClipArea = d3.area()\r\n                            .x(function (d) { return waveScaleX(d.x); })\r\n                            .y0(function (d) { return waveScaleY(Math.sin(Math.PI * 2 * config.waveOffset * -1 + Math.PI * 2 * (1 - config.waveCount) + d.y * 2 * Math.PI)); })\r\n                            .y1(function (d) { return (fillCircleRadius * 2 + waveHeight); });\r\n                    } else {\r\n                        newClipArea = clipArea;\r\n                    }\r\n                    var newWavePosition = config.waveAnimate ? waveAnimateScale(1) : 0;\r\n                    wave.transition()\r\n                        .duration(0)\r\n                        .transition()\r\n                        .duration(config.waveAnimate ? (config.waveAnimateTime * (1 - wave.attr('T'))) : (config.waveRiseTime))\r\n                        .ease(d3.easeLinear)\r\n                        .attr('d', newClipArea)\r\n                        .attr('transform', 'translate(' + newWavePosition + ',0)')\r\n                        .attr('T', '1')\r\n                        .on(\"end\", function () {\r\n                            if (config.waveAnimate) {\r\n                                wave.attr('transform', 'translate(' + waveAnimateScale(0) + ',0)');\r\n                                animateWave(config.waveAnimateTime);\r\n                            }\r\n                        });\r\n                    waveGroup.transition()\r\n                        .duration(config.waveRiseTime)\r\n                        .attr('transform', 'translate(' + waveGroupXPosition + ',' + newHeight + ')')\r\n                };\r\n            }\r\n            return new GaugeUpdater();\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div ref={node => (this.node = node)} ></div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default LiquidFilledGaugeThree;","import React from 'react';\r\nimport * as d3 from 'd3';\r\nimport { event } from 'd3';\r\nimport './liquidFilledGauge-styles.css';\r\n\r\nclass LiquidFilledGaugeTwo extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.createLiquidFilledGauge = this.createLiquidFilledGauge.bind(this);\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.createLiquidFilledGauge();\r\n    }\r\n\r\n    createLiquidFilledGauge() {\r\n        let data = this.props.data;\r\n        let tooltipData = this.props.data;\r\n        var defaultOptions = {\r\n            title: \"defaultTitle\",\r\n            tooltip: true,\r\n            svgClass: 'classFromOption',\r\n            svgId: 'idFromOption',\r\n            width: 300,\r\n            height: 250,\r\n            margin: {\r\n                top: 20,\r\n                right: 30,\r\n                bottom: 20,\r\n                left: 30\r\n            }\r\n        }\r\n        let options = this.props.options || defaultOptions;\r\n        let node = this.node;\r\n        let width = options.width;\r\n        let height = options.height;\r\n        // var margin = {\r\n        //     top: options.margin !== undefined ? options.margin.top : defaultOptions.margin.top,\r\n        //     right: options.margin !== undefined ? options.margin.right : defaultOptions.margin.right,\r\n        //     bottom: options.margin !== undefined ? options.margin.bottom : defaultOptions.margin.bottom,\r\n        //     left: options.margin !== undefined ? options.margin.left : defaultOptions.margin.left\r\n        // };\r\n        var svg = d3.select(node).append(\"svg\")\r\n            .attr(\"class\", \"liquidFilledGaugeSvgTwo \" + options.svgClass)\r\n            .attr(\"id\", options.svgId)\r\n        // svg.attr(\"viewBox\", \"-60 -10 \" + (width + margin.left + margin.right) + \" \" + (height + margin.top + margin.bottom) + \"\")\r\n        svg.attr(\"viewBox\", \"-100 -75 530 400\")\r\n\r\n        var config = liquidFillGaugeDefaultSettings();\r\n        config.circleColor = \"#b0d8a4\";\r\n        config.textColor = \"#553300\";\r\n        config.waveTextColor = \"#805615\";\r\n        config.waveColor = \"#82c16f\";\r\n        config.circleThickness = 0.2;\r\n        config.textVertPosition = 0.2;\r\n        config.waveAnimateTime = 1000;\r\n\r\n        loadLiquidFillGauge(\"liquidFilledGaugeSvgTwo\", data, config);\r\n\r\n        function liquidFillGaugeDefaultSettings() {\r\n            return {\r\n                // tooltip:this.props.tooltip,\r\n                minValue: 0, // The gauge minimum value.\r\n                maxValue: 100, // The gauge maximum value.\r\n                circleThickness: 0.05, // The outer circle thickness as a percentage of it's radius.\r\n                circleFillGap: 0.05, // The size of the gap between the outer circle and wave circle as a percentage of the outer circles radius.\r\n                circleColor: \"#178BCA\", // The color of the outer circle.\r\n                circleFill: '#fff', // The fill color of the circle.  Can be set to \"transparent\"\r\n                waveHeight: 0.05, // The wave height as a percentage of the radius of the wave circle.\r\n                waveCount: 1, // The number of full waves per width of the wave circle.\r\n                waveRiseTime: 1000, // The amount of time in milliseconds for the wave to rise from 0 to it's final height.\r\n                waveAnimateTime: 18000, // The amount of time in milliseconds for a full wave to enter the wave circle.\r\n                waveRise: true, // Control if the wave should rise from 0 to it's full height, or start at it's full height.\r\n                waveHeightScaling: true, // Controls wave size scaling at low and high fill percentages. When true, wave height reaches it's maximum at 50% fill, and minimum at 0% and 100% fill. This helps to prevent the wave from making the wave circle from appear totally full or empty when near it's minimum or maximum fill.\r\n                waveAnimate: true, // Controls if the wave scrolls or is static.\r\n                waveColor: \"#178BCA\", // The color of the fill wave.\r\n                waveOffset: 0, // The amount to initially offset the wave. 0 = no offset. 1 = offset of one full wave.\r\n                textVertPosition: 0.5, // The height at which to display the percentage text withing the wave circle. 0 = bottom, 1 = top.\r\n                textSize: 1, // The relative height of the text to display in the wave circle. 1 = 50%\r\n                valueCountUp: true, // If true, the displayed value counts up from 0 to it's final value upon loading. If false, the final value is displayed.\r\n                displayPercent: true, // If true, a % symbol is displayed after the value.\r\n                textColor: \"#045681\", // The color of the value text when the wave does not overlap it.\r\n                waveTextColor: \"#A4DBf8\" // The color of the value text when the wave overlaps it.\r\n            };\r\n        }\r\n\r\n        function loadLiquidFillGauge(elementId, value, config) {\r\n            if (config == null) config = liquidFillGaugeDefaultSettings();\r\n            // var gauge = d3.select(\".\" + elementId);\r\n            // var radius = Math.min(parseInt(svg.style(\"width\")), parseInt(svg.style(\"height\"))) / 2;\r\n            var radius = 200;\r\n            var locationX = width / 2 - radius;\r\n            var locationY = height / 2 - radius;\r\n            // var locationX = parseInt(svg.style(\"width\")) / 2 - radius;\r\n            // var locationY = parseInt(svg.style(\"height\")) / 2 - radius;\r\n            var fillPercent = Math.max(config.minValue, Math.min(config.maxValue, value)) / config.maxValue;\r\n            var waveHeightScale;\r\n            if (config.waveHeightScaling) {\r\n                waveHeightScale = d3.scaleLinear()\r\n                    .range([0, config.waveHeight, 0])\r\n                    .domain([0, 50, 100]);\r\n            } else {\r\n                waveHeightScale = d3.scaleLinear()\r\n                    .range([config.waveHeight, config.waveHeight])\r\n                    .domain([0, 100]);\r\n            }\r\n            var textPixels = (config.textSize * radius / 2);\r\n            var textFinalValue = parseFloat(value).toFixed(2);\r\n            var textStartValue = config.valueCountUp ? config.minValue : textFinalValue;\r\n            var percentText = config.displayPercent ? \"%\" : \"\";\r\n            var circleThickness = config.circleThickness * radius;\r\n            var circleFillGap = config.circleFillGap * radius;\r\n            var fillCircleMargin = circleThickness + circleFillGap;\r\n            var fillCircleRadius = radius - fillCircleMargin;\r\n            var waveHeight = fillCircleRadius * waveHeightScale(fillPercent * 100);\r\n            var waveLength = fillCircleRadius * 2 / config.waveCount;\r\n            var waveClipCount = 1 + config.waveCount;\r\n            var waveClipWidth = waveLength * waveClipCount;\r\n\r\n            // Rounding functions so that the correct number of decimal places is always displayed as the value counts up.\r\n            var textRounder = function (value) { return Math.round(value); };\r\n            if (parseFloat(textFinalValue) !== parseFloat(textRounder(textFinalValue))) {\r\n                textRounder = function (value) { return parseFloat(value).toFixed(1); };\r\n            }\r\n            if (parseFloat(textFinalValue) !== parseFloat(textRounder(textFinalValue))) {\r\n                textRounder = function (value) { return parseFloat(value).toFixed(2); };\r\n            }\r\n\r\n            // Data for building the clip wave area.\r\n            var data = [];\r\n            for (var i = 0; i <= 40 * waveClipCount; i++) {\r\n                data.push({ x: i / (40 * waveClipCount), y: (i / (40)) });\r\n            }\r\n\r\n            // Scales for drawing the outer circle.\r\n            var gaugeCircleX = d3.scaleLinear().range([0, 2 * Math.PI]).domain([0, 1]);\r\n            var gaugeCircleY = d3.scaleLinear().range([0, radius]).domain([0, radius]);\r\n\r\n            // Scales for controlling the size of the clipping path.\r\n            var waveScaleX = d3.scaleLinear().range([0, waveClipWidth]).domain([0, 1]);\r\n            var waveScaleY = d3.scaleLinear().range([0, waveHeight]).domain([0, 1]);\r\n\r\n            // Scales for controlling the position of the clipping path.\r\n            var waveRiseScale = d3.scaleLinear()\r\n                // The clipping area size is the height of the fill circle + the wave height, so we position the clip wave\r\n                // such that the it will overlap the fill circle at all when at 0%, and will totally cover the fill\r\n                // circle at 100%.\r\n                .range([(fillCircleMargin + fillCircleRadius * 2 + waveHeight), (fillCircleMargin - waveHeight)])\r\n                .domain([0, 1]);\r\n\r\n            var waveAnimateScale = d3.scaleLinear()\r\n                .range([0, waveClipWidth - fillCircleRadius * 2]) // Push the clip area one full wave then snap back.\r\n                .domain([0, 1]);\r\n\r\n            // Scale for controlling the position of the text within the gauge.\r\n            var textRiseScaleY = d3.scaleLinear()\r\n                .range([fillCircleMargin + fillCircleRadius * 2, (fillCircleMargin + textPixels * 0.7)])\r\n                .domain([0, 1]);\r\n\r\n            // Center the gauge within the parent SVG.\r\n            var gaugeGroup = svg.append(\"g\")\r\n                .attr('transform', 'translate(' + locationX + ',' + locationY + ')')\r\n                .on('mouseover', function (d, i) {\r\n                    if (options.tooltip) {\r\n                        tooltip\r\n                            .style('top', (event.pageY - 50) + 'px')\r\n                            .style('left', (event.pageX - 50) + 'px')\r\n                            .style(\"display\", \"block\")\r\n                            .html(\"Value: \" + tooltipData);\r\n                    }\r\n                })\r\n\r\n                .on('mousemove', function (d, i) {\r\n                    if (options.tooltip) {\r\n                        tooltip\r\n                            .style('top', (event.pageY - 50) + 'px')\r\n                            .style('left', (event.pageX - 50) + 'px')\r\n                            .style(\"display\", \"block\")\r\n                            .html(\"Value: \" + tooltipData);\r\n                    }\r\n                })\r\n                .on('mouseout', function (d, i) {\r\n                    tooltip.style(\"display\", \"none\")\r\n                });\r\n\r\n            var tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltipLiquidFilled\");\r\n\r\n            // Draw the fill circle\r\n            gaugeGroup.append(\"circle\")\r\n                .attr(\"cx\", radius)\r\n                .attr(\"cy\", radius)\r\n                .attr(\"r\", radius)\r\n                .attr(\"class\", \"fill\")\r\n                .style(\"fill\", config.circleFill);\r\n\r\n            // Draw the outer circle.\r\n            var gaugeStrokeArc = d3.arc()\r\n                .startAngle(gaugeCircleX(0))\r\n                .endAngle(gaugeCircleX(1))\r\n                .outerRadius(gaugeCircleY(radius))\r\n                .innerRadius(gaugeCircleY(radius - circleThickness));\r\n            gaugeGroup.append(\"path\")\r\n                .attr(\"d\", gaugeStrokeArc)\r\n                .attr(\"class\", \"stroke\")\r\n                .style(\"fill\", config.circleColor)\r\n                .attr('transform', 'translate(' + radius + ',' + radius + ')');\r\n\r\n            // Text where the wave does not overlap.\r\n            var text1 = gaugeGroup.append(\"text\")\r\n                .text(textRounder(textStartValue) + percentText)\r\n                .attr(\"class\", \"liquidFillGaugeText\")\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .attr(\"font-size\", textPixels + \"px\")\r\n                .style(\"fill\", config.textColor)\r\n                .attr('transform', 'translate(' + radius + ',' + textRiseScaleY(config.textVertPosition) + ')');\r\n\r\n            // The clipping wave area.\r\n            var clipArea = d3.area()\r\n                .x(function (d) { return waveScaleX(d.x); })\r\n                .y0(function (d) { return waveScaleY(Math.sin(Math.PI * 2 * config.waveOffset * -1 + Math.PI * 2 * (1 - config.waveCount) + d.y * 2 * Math.PI)); })\r\n                .y1(function (d) { return (fillCircleRadius * 2 + waveHeight); });\r\n\r\n            var waveGroup = gaugeGroup.append(\"defs\")\r\n                .append(\"clipPath\")\r\n                .attr(\"id\", \"clipWave\" + elementId);\r\n            var wave = waveGroup.append(\"path\")\r\n                .datum(data)\r\n                .attr(\"d\", clipArea)\r\n                .attr(\"T\", 0);\r\n\r\n            // The inner circle with the clipping wave attached.\r\n            var fillCircleGroup = gaugeGroup.append(\"g\")\r\n                .attr(\"clip-path\", \"url(#clipWave\" + elementId + \")\");\r\n            fillCircleGroup.append(\"circle\")\r\n                .attr(\"cx\", radius)\r\n                .attr(\"cy\", radius)\r\n                .attr(\"r\", fillCircleRadius)\r\n                .style(\"fill\", config.waveColor);\r\n\r\n            // Text where the wave does overlap.\r\n            var text2 = fillCircleGroup.append(\"text\")\r\n                .text(textRounder(textStartValue) + percentText)\r\n                .attr(\"class\", \"liquidFillGaugeText\")\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .attr(\"font-size\", textPixels + \"px\")\r\n                .style(\"fill\", config.waveTextColor)\r\n                .attr('transform', 'translate(' + radius + ',' + textRiseScaleY(config.textVertPosition) + ')');\r\n            // Make the value count up.\r\n            if (config.valueCountUp) {\r\n                var textTween = function () {\r\n                    var i = d3.interpolate(this.textContent, textFinalValue);\r\n                    var myText = d3.select(this);\r\n                    return function (t) {\r\n                        myText.text(textRounder(i(t)) + percentText);\r\n                    };\r\n                };\r\n                text1.transition()\r\n                    .duration(config.waveRiseTime)\r\n                    .tween(\"text\", textTween);\r\n                text2.transition()\r\n                    .duration(config.waveRiseTime)\r\n                    .tween(\"text\", textTween);\r\n            }\r\n            // Make the wave rise. wave and waveGroup are separate so that horizontal and vertical movement can be controlled independently.\r\n            var waveGroupXPosition = fillCircleMargin + fillCircleRadius * 2 - waveClipWidth;\r\n            if (config.waveRise) {\r\n                waveGroup.attr('transform', 'translate(' + waveGroupXPosition + ',' + waveRiseScale(0) + ')')\r\n                    .transition()\r\n                    .duration(config.waveRiseTime)\r\n                    .attr('transform', 'translate(' + waveGroupXPosition + ',' + waveRiseScale(fillPercent) + ')')\r\n                    .on(\"start\", function () { wave.attr('transform', 'translate(1,0)'); }); // This transform is necessary to get the clip wave positioned correctly when waveRise=true and waveAnimate=false. The wave will not position correctly without this, but it's not clear why this is actually necessary.\r\n            } else {\r\n                waveGroup.attr('transform', 'translate(' + waveGroupXPosition + ',' + waveRiseScale(fillPercent) + ')');\r\n            }\r\n            if (config.waveAnimate) animateWave();\r\n            function animateWave() {\r\n                wave.attr('transform', 'translate(' + waveAnimateScale(wave.attr('T')) + ',0)');\r\n                wave.transition()\r\n                    .duration(config.waveAnimateTime * (1 - wave.attr('T')))\r\n                    .ease(d3.easeLinear)\r\n                    .attr('transform', 'translate(' + waveAnimateScale(1) + ',0)')\r\n                    .attr('T', 1)\r\n                    .on('end', function () {\r\n                        wave.attr('T', 0);\r\n                        animateWave(config.waveAnimateTime);\r\n                    });\r\n            }\r\n            function GaugeUpdater() {\r\n                this.update = function (value) {\r\n                    var newFinalValue = parseFloat(value).toFixed(2);\r\n                    var textRounderUpdater = function (value) { return Math.round(value); };\r\n                    if (parseFloat(newFinalValue) !== parseFloat(textRounderUpdater(newFinalValue))) {\r\n                        textRounderUpdater = function (value) { return parseFloat(value).toFixed(1); };\r\n                    }\r\n                    if (parseFloat(newFinalValue) !== parseFloat(textRounderUpdater(newFinalValue))) {\r\n                        textRounderUpdater = function (value) { return parseFloat(value).toFixed(2); };\r\n                    }\r\n                    var textTween = function () {\r\n                        var i = d3.interpolate(this.textContent, parseFloat(value).toFixed(2));\r\n                        var myText = d3.select(this);\r\n                        return function (t) {\r\n                            myText.text(textRounder(i(t)) + percentText);\r\n                        };\r\n                    };\r\n                    text1.transition()\r\n                        .duration(config.waveRiseTime)\r\n                        .tween(\"text\", textTween);\r\n                    text2.transition()\r\n                        .duration(config.waveRiseTime)\r\n                        .tween(\"text\", textTween);\r\n                    var fillPercent = Math.max(config.minValue, Math.min(config.maxValue, value)) / config.maxValue;\r\n                    var waveHeight = fillCircleRadius * waveHeightScale(fillPercent * 100);\r\n                    var waveRiseScale = d3.scaleLinear()\r\n                        // The clipping area size is the height of the fill circle + the wave height, so we position the clip wave\r\n                        // such that the it will overlap the fill circle at all when at 0%, and will totally cover the fill\r\n                        // circle at 100%.\r\n                        .range([(fillCircleMargin + fillCircleRadius * 2 + waveHeight), (fillCircleMargin - waveHeight)])\r\n                        .domain([0, 1]);\r\n                    var newHeight = waveRiseScale(fillPercent);\r\n                    var waveScaleX = d3.scaleLinear().range([0, waveClipWidth]).domain([0, 1]);\r\n                    var waveScaleY = d3.scaleLinear().range([0, waveHeight]).domain([0, 1]);\r\n                    var newClipArea;\r\n                    if (config.waveHeightScaling) {\r\n                        newClipArea = d3.area()\r\n                            .x(function (d) { return waveScaleX(d.x); })\r\n                            .y0(function (d) { return waveScaleY(Math.sin(Math.PI * 2 * config.waveOffset * -1 + Math.PI * 2 * (1 - config.waveCount) + d.y * 2 * Math.PI)); })\r\n                            .y1(function (d) { return (fillCircleRadius * 2 + waveHeight); });\r\n                    } else {\r\n                        newClipArea = clipArea;\r\n                    }\r\n                    var newWavePosition = config.waveAnimate ? waveAnimateScale(1) : 0;\r\n                    wave.transition()\r\n                        .duration(0)\r\n                        .transition()\r\n                        .duration(config.waveAnimate ? (config.waveAnimateTime * (1 - wave.attr('T'))) : (config.waveRiseTime))\r\n                        .ease(d3.easeLinear)\r\n                        .attr('d', newClipArea)\r\n                        .attr('transform', 'translate(' + newWavePosition + ',0)')\r\n                        .attr('T', '1')\r\n                        .on(\"end\", function () {\r\n                            if (config.waveAnimate) {\r\n                                wave.attr('transform', 'translate(' + waveAnimateScale(0) + ',0)');\r\n                                animateWave(config.waveAnimateTime);\r\n                            }\r\n                        });\r\n                    waveGroup.transition()\r\n                        .duration(config.waveRiseTime)\r\n                        .attr('transform', 'translate(' + waveGroupXPosition + ',' + newHeight + ')')\r\n                };\r\n            }\r\n            return new GaugeUpdater();\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div ref={node => (this.node = node)} ></div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default LiquidFilledGaugeTwo;","import React from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport HamburgerMenu from 'react-hamburger-menu';\r\n\r\nconst options = [\r\n  'None',\r\n  'Atria',\r\n  'Callisto',\r\n  'Dione',\r\n  'Ganymede',\r\n  'Hangouts Call',\r\n  'Luna',\r\n  'Oberon',\r\n  'Phobos',\r\n  'Pyxis',\r\n  'Sedna',\r\n  'Titania',\r\n  'Triton',\r\n  'Umbriel',\r\n];\r\n\r\nconst ITEM_HEIGHT = 48;\r\n\r\nexport default function LongMenu() {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* <IconButton\r\n        aria-label=\"more\"\r\n        aria-controls=\"long-menu\"\r\n        aria-haspopup=\"true\"\r\n        onClick={handleClick}\r\n      >\r\n        <MoreVertIcon />\r\n      </IconButton> */}\r\n      <HamburgerMenu className=\"hamburger\"\r\n              isOpen={open}\r\n              menuClicked={handleClick}\r\n              \r\n            />\r\n      {/* <Menu\r\n        id=\"long-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={open}\r\n        onClose={handleClose}\r\n        PaperProps={{\r\n          style: {\r\n            maxHeight: ITEM_HEIGHT * 4.5,\r\n            width: '20ch',\r\n          },\r\n        }}\r\n      >\r\n        {options.map((option) => (\r\n          <MenuItem key={option} selected={option === 'Pyxis'} onClick={handleClose}>\r\n            {option}\r\n          </MenuItem>\r\n        ))}\r\n      </Menu> */}\r\n      <Menu\r\n        id=\"simple-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleClose}\r\n      >\r\n        <MenuItem onClick={handleClose}><a href=\"https://www.vg.no/spesial/2020/corona/fylker/30/\">Information for other municipalities</a></MenuItem>\r\n        <MenuItem onClick={handleClose}><a href=\"https://www.fhi.no/en/id/infectious-diseases/coronavirus/daily-reports/daily-reports-COVID19/\">Daily report in Norway</a></MenuItem>\r\n        <MenuItem onClick={handleClose}><a href=\"https://www.worldometers.info/coronavirus/country/norway/\">Norway statistics and predictions</a></MenuItem>\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport * as d3 from \"d3\";\r\nimport ZoomableBubbleChartTestData from './ZoomableBubbleChartTestData';\r\nimport './zoomablebubblechart-styles.css';\r\n// import get_browser_info from './../Utils/GetBrowserName';\r\n\r\nclass ZoomableBubbleChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.createZoomableBubbleChart = this.createZoomableBubbleChart.bind(this);\r\n        this.state = { title: this.props.data.title };\r\n    }\r\n    componentDidMount() {\r\n        var that = this;\r\n        d3.selectAll(\".toolTipPie\" + that.state.title).remove();\r\n        that.createZoomableBubbleChart();\r\n    }\r\n    componentDidUpdate(props) {\r\n        var that = this;\r\n        d3.selectAll(\".toolTipPie\" + that.state.title).remove();\r\n        //d3.selectAll(\".zoomBubble\").remove();\r\n        that.createZoomableBubbleChart();\r\n    }\r\n    createZoomableBubbleChart() {\r\n        var node = this.node;\r\n        // var browser = get_browser_info();\r\n        var width = this.props.width || 600,\r\n            height = this.props.height || 500;\r\n\r\n        var defaultOptions = {\r\n            title: \"defaultTitle\",\r\n            colors: [\"red\", \"blue\", \"green\", \"purple\", \"orange\"],\r\n            margin: {\r\n                top: 20,\r\n                right: 30,\r\n                bottom: 20,\r\n                left: 30\r\n\r\n            },\r\n            legends: {\r\n                visibility: false,\r\n            },\r\n            tooltip: true,\r\n        };\r\n\r\n        // var root = this.props.data || ZoomableBubbleChartTestData;\r\n        var keyValue = this.props.keyValue;\r\n        var originalData = JSON.parse(JSON.stringify(this.props.data));\r\n        const filteredData = originalData.filter(cityName => (cityName.name === keyValue)); \r\n        var root;\r\n        if(filteredData.length !== 0){\r\n            root = filteredData[0];\r\n        }\r\n        console.log(root);\r\n        var options = this.props.options || defaultOptions;\r\n\r\n        var title = options.title;\r\n        var tooltip = options.tooltip;\r\n        var colors = options.colors || defaultOptions.colors;\r\n        var margin = {\r\n            top: options.margin !== undefined ? options.margin.top : defaultOptions.margin.top,\r\n            right: options.margin !== undefined ? options.margin.right : defaultOptions.margin.right,\r\n            bottom: options.margin !== undefined ? options.margin.bottom : defaultOptions.margin.bottom,\r\n            left: options.margin !== undefined ? options.margin.left : defaultOptions.margin.left\r\n\r\n        };\r\n        var legends = {\r\n            visibility: options.legends !== undefined ? options.legends.visibility : defaultOptions.legends.visibility\r\n\r\n        };\r\n        var margin = 20;\r\n\r\n        var svg = d3.select(node)\r\n            .attr(\"class\", \"zoomBubble \" + options.svgClass)\r\n            .attr(\"id\", options.svgId)\r\n            .attr(\"viewBox\", \"-70 -75 750 800\");\r\n        svg.select(\".zoomParentGroup\").remove();\r\n\r\n        var diameter = width,\r\n            g = svg.append(\"g\")\r\n                .attr(\"Class\",\"zoomParentGroup\")\r\n                .attr(\"transform\", \"translate(\" + diameter / 2 + \",\" + diameter / 2 + \")\");\r\n\r\n        var color = d3.scaleLinear()\r\n            .domain([-1, 5])\r\n            .range([\"hsl(152,80%,80%)\", \"hsl(228,30%,40%)\"])\r\n            .interpolate(d3.interpolateHcl);\r\n\r\n        var pack = d3.pack()\r\n            .size([diameter - margin, diameter - margin])\r\n            .padding(2);\r\n\r\n        console.log(root);\r\n\r\n        root = d3.hierarchy(root)\r\n            .sum(function (d) { return d.membership; })\r\n            .sort(function (a, b) { return b.value - a.value; });\r\n\r\n        var focus = root,\r\n            nodes = pack(root).descendants(),\r\n            view;\r\n        var tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"toolTipBubble\");\r\n        var circle = g.selectAll(\"circle\")\r\n            .data(nodes)\r\n            .enter().append(\"circle\")\r\n            .attr(\"class\", function (d) { return d.parent ? d.children ? \"node\" : \"node node--leaf\" : \"node node--root\"; })\r\n            .style(\"fill\", function (d) { return d.children ? color(d.depth) : null; })\r\n            .on(\"click\", function (d) {\r\n                if (focus !== d) { zoom(d); d3.event.stopPropagation() };\r\n            })\r\n            .on('mouseover', function (d, i) {\r\n                if (options.tooltip) {\r\n                    tooltip\r\n                        .style('top', (d3.event.pageY - 50) + 'px')\r\n                        .style('left', (d3.event.pageX - 50) + 'px')\r\n                        .style(\"display\", \"block\")\r\n                        .html(\"Current: \" + d.data.name);\r\n                }\r\n            })\r\n            .on('mousemove', function (d, i) {\r\n                if (options.tooltip) {\r\n                    tooltip\r\n                        .style('top', (d3.event.pageY - 50) + 'px')\r\n                        .style('left', (d3.event.pageX - 50) + 'px')\r\n                        .style(\"display\", \"block\")\r\n                        .html(\"Current: \" + d.data.name);\r\n                }\r\n            })\r\n            .on('mouseout', function (d, i) {\r\n                tooltip.style(\"display\", \"none\")\r\n            });\r\n\r\n        var text = g.selectAll(\"text\")\r\n            .data(nodes)\r\n            .enter().append(\"text\")\r\n            .attr(\"class\", \"label\")\r\n            .style(\"fill-opacity\", function (d) { return d.parent === root ? 1 : 0; })\r\n            .style(\"display\", function (d) { return d.parent === root ? \"inline\" : \"none\"; })\r\n            .text(function (d) { return d.data.name; });\r\n\r\n        var nod = svg.selectAll(\"circle,text\");\r\n\r\n        svg\r\n\r\n            .style(\"background\", color(-1))\r\n            .on(\"click\", function () { zoom(root); });\r\n\r\n        zoomTo([root.x, root.y, root.r * 2 + margin]);\r\n\r\n        function zoom(d) {\r\n            console.log(d);\r\n            var focus0 = focus; focus = d;\r\n\r\n            var transition = d3.transition()\r\n                .duration(d3.event.altKey ? 7500 : 750)\r\n                .tween(\"zoom\", function (d) {\r\n                    var i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2 + margin]);\r\n                    return function (t) { zoomTo(i(t)); };\r\n                });\r\n\r\n            transition.selectAll(\"text\")\r\n                .filter(function (d) { \r\n                    console.log(d)\r\n                    return d && d.parent === focus || this.style.display === \"inline\"; \r\n                })\r\n                .style(\"fill-opacity\", function (d) { return d.parent === focus ? 1 : 0; })\r\n                .on(\"start\", function (d) { if (d && d.parent === focus) this.style.display = \"inline\"; })\r\n                .on(\"end\", function (d) { if (d && d.parent !== focus) this.style.display = \"none\"; });\r\n        }\r\n\r\n        function zoomTo(v) {\r\n            var k = diameter / v[2]; view = v;\r\n            nod.attr(\"transform\", function (d) { return \"translate(\" + (d.x - v[0]) * k + \",\" + (d.y - v[1]) * k + \")\"; });\r\n            circle.attr(\"r\", function (d) { return d.r * k; });\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n        <div className=\"zoomablebubblechartwrapper\">\r\n        <svg ref={node => (this.node = node)} />\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ZoomableBubbleChart;","const ZoomableBubbleChartTestData =\r\n    [\r\n        {\r\n            \"name\": \"Viken\",\r\n            \"children\": [\r\n                {\r\n                    \"name\": \"Viken\",\r\n                    \"children\": [\r\n                        {\r\n                            \"name\": \"Ahus Nordbyhagen\",\r\n                            \"children\": [{\r\n                                \"name\": \"Hospitalized COVID Patients\",\r\n                                \"children\": [{\r\n                                    \"name\": \"Total Cases\",\r\n                                    \"children\": [{\r\n                                        \"name\": \"59\",\r\n                                        \"specialist\": 59,\r\n                                        \"membership\": 59\r\n                                    }]\r\n                                    \r\n                                },{\r\n                                    \"name\": \"Current Cases\",\r\n                                    \"children\": [{\r\n                                        \"name\": \"9\",\r\n                                        \"specialist\": 9,\r\n                                        \"membership\": 9\r\n                                    }]\r\n                                    \r\n                                }]\r\n                            }]\r\n                        },\r\n                        \r\n                        {\r\n                            \"name\": \"Bærum sykehus\",\r\n                            \"children\": [{\r\n                                \"name\": \"Hospitalized COVID Patients\",\r\n                                \"children\": [{\r\n                                    \"name\": \"Total Cases\",\r\n                                    \"children\": [{\r\n                                        \"name\": \"21\",\r\n                                        \"specialist\": 21,\r\n                                        \"membership\": 21\r\n                                    }]\r\n                                    \r\n                                },{\r\n                                    \"name\": \"Current Cases\",\r\n                                    \"children\": [{\r\n                                        \"name\": \"2\",\r\n                                        \"specialist\": 2,\r\n                                        \"membership\": 2\r\n                                    }]\r\n                                    \r\n                                }]\r\n                            }]\r\n                        },\r\n\r\n                        {\r\n                            \"name\": \"Sykehuset Østfold Kalnes/Moss\",\r\n                            \"children\": [{\r\n                                \"name\": \"Hospitalized COVID Patients\",\r\n                                \"children\": [{\r\n                                    \"name\": \"Total Cases\",\r\n                                    \"children\": [{\r\n                                        \"name\": \"23\",\r\n                                        \"specialist\": 23,\r\n                                        \"membership\": 23\r\n                                    }]\r\n                                    \r\n                                },{\r\n                                    \"name\": \"Current Cases\",\r\n                                    \"children\": [{\r\n                                        \"name\": \"3\",\r\n                                        \"specialist\": 3,\r\n                                        \"membership\": 3\r\n                                    }]\r\n                                    \r\n                                }]\r\n                            }]\r\n                        }\r\n                    ]\r\n                }\r\n                \r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"Halden\",\r\n            \"children\": [\r\n                {\r\n                    \"name\": \"Halden\",\r\n                    \"children\": [\r\n                        {\r\n                            \"name\": \"Ahus Nordbyhagen\",\r\n                            \"children\": [{\r\n                                \"name\": \"Hospitalized COVID Patients\",\r\n                                \"children\": [{\r\n                                    \"name\": \"Total Cases\",\r\n                                    \"children\": [{\r\n                                        \"name\": \"59\",\r\n                                        \"specialist\": 59,\r\n                                        \"membership\": 59\r\n                                    }]\r\n                                    \r\n                                },{\r\n                                    \"name\": \"Current Cases\",\r\n                                    \"children\": [{\r\n                                        \"name\": \"9\",\r\n                                        \"specialist\": 9,\r\n                                        \"membership\": 9\r\n                                    }]\r\n                                    \r\n                                }]\r\n                            }]\r\n                        },\r\n                        \r\n                        {\r\n                            \"name\": \"Bærum sykehus\",\r\n                            \"children\": [{\r\n                                \"name\": \"Hospitalized COVID Patients\",\r\n                                \"children\": [{\r\n                                    \"name\": \"Total Cases\",\r\n                                    \"children\": [{\r\n                                        \"name\": \"21\",\r\n                                        \"specialist\": 21,\r\n                                        \"membership\": 21\r\n                                    }]\r\n                                    \r\n                                },{\r\n                                    \"name\": \"Current Cases\",\r\n                                    \"children\": [{\r\n                                        \"name\": \"2\",\r\n                                        \"specialist\": 2,\r\n                                        \"membership\": 2\r\n                                    }]\r\n                                    \r\n                                }]\r\n                            }]\r\n                        },\r\n\r\n                        {\r\n                            \"name\": \"Sykehuset Østfold Kalnes/Moss\",\r\n                            \"children\": [{\r\n                                \"name\": \"Hospitalized COVID Patients\",\r\n                                \"children\": [{\r\n                                    \"name\": \"Total Cases\",\r\n                                    \"children\": [{\r\n                                        \"name\": \"23\",\r\n                                        \"specialist\": 23,\r\n                                        \"membership\": 23\r\n                                    }]\r\n                                    \r\n                                },{\r\n                                    \"name\": \"Current Cases\",\r\n                                    \"children\": [{\r\n                                        \"name\": \"3\",\r\n                                        \"specialist\": 3,\r\n                                        \"membership\": 3\r\n                                    }]\r\n                                    \r\n                                }]\r\n                            }]\r\n                        }\r\n                    ]\r\n                }\r\n                \r\n            ]\r\n        },\r\n\r\n        {\r\n            \"name\": \"Fredrikstad\",\r\n            \"children\": [\r\n                {\r\n                    \"name\": \"Fredrikstad\",\r\n                    \"children\": [\r\n                        {\r\n                            \"name\": \"Ahus Nordbyhagen\",\r\n                            \"children\": [{\r\n                                \"name\": \"Hospitalized COVID Patients\",\r\n                                \"children\": [{\r\n                                    \"name\": \"Total Cases\",\r\n                                    \"children\": [{\r\n                                        \"name\": \"59\",\r\n                                        \"specialist\": 59,\r\n                                        \"membership\": 59\r\n                                    }]\r\n                                    \r\n                                },{\r\n                                    \"name\": \"Current Cases\",\r\n                                    \"children\": [{\r\n                                        \"name\": \"9\",\r\n                                        \"specialist\": 9,\r\n                                        \"membership\": 9\r\n                                    }]\r\n                                    \r\n                                }]\r\n                            }]\r\n                        },\r\n                        \r\n                        {\r\n                            \"name\": \"Bærum sykehus\",\r\n                            \"children\": [{\r\n                                \"name\": \"Hospitalized COVID Patients\",\r\n                                \"children\": [{\r\n                                    \"name\": \"Total Cases\",\r\n                                    \"children\": [{\r\n                                        \"name\": \"21\",\r\n                                        \"specialist\": 21,\r\n                                        \"membership\": 21\r\n                                    }]\r\n                                    \r\n                                },{\r\n                                    \"name\": \"Current Cases\",\r\n                                    \"children\": [{\r\n                                        \"name\": \"2\",\r\n                                        \"specialist\": 2,\r\n                                        \"membership\": 2\r\n                                    }]\r\n                                    \r\n                                }]\r\n                            }]\r\n                        },\r\n\r\n                        {\r\n                            \"name\": \"Sykehuset Østfold Kalnes/Moss\",\r\n                            \"children\": [{\r\n                                \"name\": \"Hospitalized COVID Patients\",\r\n                                \"children\": [{\r\n                                    \"name\": \"Total Cases\",\r\n                                    \"children\": [{\r\n                                        \"name\": \"23\",\r\n                                        \"specialist\": 23,\r\n                                        \"membership\": 23\r\n                                    }]\r\n                                    \r\n                                },{\r\n                                    \"name\": \"Current Cases\",\r\n                                    \"children\": [{\r\n                                        \"name\": \"3\",\r\n                                        \"specialist\": 3,\r\n                                        \"membership\": 3\r\n                                    }]\r\n                                    \r\n                                }]\r\n                            }]\r\n                        }\r\n                    ]\r\n                }\r\n                \r\n            ]\r\n        }\r\n    ]\r\n\r\nexport default ZoomableBubbleChartTestData;","import React, { Component } from 'react';\r\n\r\nimport * as d3 from \"d3\";\r\n\r\n// import './gaugechart-styles.css'\r\n\r\n \r\n\r\nclass GaugeChart extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.createGaugeChart = this.createGaugeChart.bind(this);\r\n\r\n        this.state = { title: this.props.data.title };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.createGaugeChart();\r\n\r\n    }\r\n\r\n \r\n\r\n    createGaugeChart() {\r\n\r\n        var node = this.node;\r\n\r\n        var width = this.props.width || 690,\r\n\r\n            height = this.props.height || 250;\r\n\r\n        var defaultOptions = {\r\n\r\n            title: \"defaultTitle\",\r\n\r\n            gaugeColors: {\r\n\r\n                percentCenterTextColor: \"#0E2180\",\r\n\r\n                targetTriangleColor: \"rgb(100,100,100)\",\r\n\r\n                targetValueColor: \"rgb(25,184,97)\",\r\n\r\n                arcBackgroundColor: \"rgb(146,208,80)\",\r\n\r\n                arcForegroundColors: ['rgb(255,0,0)', 'rgb(255,124,128)'],\r\n\r\n                arcLineColor: \"rgb(255,124,128)\"\r\n\r\n            },\r\n\r\n            margin: {\r\n\r\n                top: 20,\r\n\r\n                right: 30,\r\n\r\n                bottom: 20,\r\n\r\n                left: 30\r\n\r\n            },\r\n\r\n            tooltip: true,\r\n\r\n        };\r\n\r\n \r\n\r\n        var data = this.props.data;\r\n\r\n        var indicator = this.props.indicator;\r\n\r\n        var currentPercentData = this.props.currentPercent;\r\n\r\n \r\n\r\n        var options = this.props.options || defaultOptions;\r\n\r\n        var tooltip = options.tooltip;\r\n\r\n        var title = options.title;\r\n\r\n        var currentPercent = currentPercentData / 100;\r\n\r\n        var targetPercent;\r\n\r\n        var loopCount;\r\n\r\n        var colors = [ \"#2D469B\", \"#1E348E\", \"#0E2180\",\"#8A053C\",\"#580326\"];\r\n\r\n \r\n\r\n        if (data === 1) { //For cards\r\n\r\n            targetPercent = 20 / 100;\r\n\r\n            loopCount = 5\r\n\r\n        }\r\n\r\n        else {\r\n\r\n            targetPercent = data / 100;\r\n\r\n            loopCount = 1;\r\n\r\n        }\r\n\r\n \r\n\r\n        var gaugeColors = options.gaugeColors || defaultOptions.gaugeColors;\r\n\r\n        var percentCenterTextColor = gaugeColors.percentCenterTextColor;\r\n\r\n        var targetTriangleColor = gaugeColors.targetTriangleColor;\r\n\r\n        var targetValueColor = gaugeColors.targetValueColor;\r\n\r\n        var arcBackgroundColor = gaugeColors.arcBackgroundColor;\r\n\r\n        var arcForegroundColors = gaugeColors.arcForegroundColors;\r\n\r\n        var arcLineColor = gaugeColors.arcLineColor;\r\n\r\n        var margin = {\r\n\r\n            top: options.margin !== undefined ? options.margin.top : defaultOptions.margin.top,\r\n\r\n            right: options.margin !== undefined ? options.margin.right : defaultOptions.margin.right,\r\n\r\n            bottom: options.margin !== undefined ? options.margin.bottom : defaultOptions.margin.bottom,\r\n\r\n            left: options.margin !== undefined ? options.margin.left : defaultOptions.margin.left\r\n\r\n        };\r\n\r\n \r\n\r\n        var totalAngle = Math.PI;\r\n\r\n        var startAngle = -(Math.PI / 2);\r\n\r\n        var endAngle = startAngle + totalAngle;\r\n\r\n        var outerRadius = width / 4;\r\n\r\n        var innerRadius = outerRadius * 0.95;\r\n\r\n        var foregroundInnerRadius = outerRadius * 0.85;\r\n\r\n \r\n\r\n        var triangleTranslateMax = width * 0.172;\r\n\r\n        var lineOffset = width * 0.5223;\r\n\r\n        var lineHeight = width * 0.0111;\r\n\r\n        var lineWidth = width * 0.1667;\r\n\r\n \r\n\r\n        var tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"toolTipGauge toolTipGauge\" + title);\r\n\r\n        var arc = d3.arc()\r\n\r\n            .innerRadius(innerRadius)\r\n\r\n            .outerRadius(outerRadius)\r\n\r\n            .startAngle(startAngle);\r\n\r\n \r\n\r\n        var forgroundArc = d3.arc()\r\n\r\n            .innerRadius(foregroundInnerRadius)\r\n\r\n            .outerRadius(outerRadius)\r\n\r\n            .startAngle(startAngle);\r\n\r\n \r\n\r\n        var svg = d3.select(node).append(\"svg\")\r\n\r\n            .attr(\"class\", \"GaugeChart\" + title + \" \" + options.svgClass)\r\n\r\n            .attr(\"id\", options.svgId)\r\n\r\n \r\n\r\n        if (this.props.type === \"singleGaugeChart\") {\r\n\r\n            svg.attr(\"viewBox\", \"-380 -160 \" + (width + margin.left + margin.right - 100) + \" \" + (height + margin.top + margin.bottom - 90) + \"\")\r\n\r\n        }\r\n\r\n        else {\r\n\r\n            svg.attr(\"viewBox\", \"-380 -160 \" + (width + margin.left + margin.right - 300) + \" \" + (height + margin.top + margin.bottom - 90) + \"\")\r\n\r\n        }\r\n\r\n \r\n\r\n        // big svg -280 -160 460 200\r\n\r\n        // small svg -280 -160 260 290\r\n\r\n        var g;\r\n\r\n        if (this.props.type === \"singleGaugeChart\") {\r\n\r\n            g = svg.append('g')\r\n\r\n                .attr(\"transform\", \"translate(-50,10)\");\r\n\r\n        }\r\n\r\n        else {\r\n\r\n            g = svg.append('g')\r\n\r\n                .attr(\"transform\", \"translate(-150,10)\");\r\n\r\n        }\r\n\r\n        // big -50,10\r\n\r\n        // small -150,10\r\n\r\n \r\n\r\n        if (indicator === true) {\r\n\r\n            var triangle = g.append('path').attr('class', 'pointer');\r\n\r\n            triangle.attr(\"d\", d3.symbol().type(d3.symbolTriangle).size(500))\r\n\r\n                .attr(\"transform\", function (d) {\r\n\r\n                    return (\"translate(\"\r\n\r\n                        + (triangleTranslateMax * Math.sin(startAngle + (currentPercent * totalAngle)))\r\n\r\n                        + \",\"\r\n\r\n                        + -(triangleTranslateMax * Math.cos(startAngle + (currentPercent * totalAngle)))\r\n\r\n                        + \") rotate(\" + (-90 + (currentPercent * 180)) + \")\");\r\n\r\n                })\r\n\r\n                .style(\"fill\", targetTriangleColor)\r\n\r\n                .on('mouseover', function (d, i) {\r\n\r\n                    if (options.tooltip) {\r\n\r\n                        tooltip\r\n\r\n                            .style('top', (d3.event.pageY - 50) + 'px')\r\n\r\n                            .style('left', (d3.event.pageX - 50) + 'px')\r\n\r\n                            .style(\"display\", \"block\")\r\n\r\n                            .html(\"Current: \" + (currentPercent * 100));\r\n\r\n                    }\r\n\r\n                })\r\n\r\n                .on('mousemove', function (d, i) {\r\n\r\n                    if (options.tooltip) {\r\n\r\n                        tooltip\r\n\r\n                            .style('top', (d3.event.pageY - 50) + 'px')\r\n\r\n                            .style('left', (d3.event.pageX - 50) + 'px')\r\n\r\n                            .style(\"display\", \"block\")\r\n\r\n                            .html(\"Current: \" + (currentPercent * 100));\r\n\r\n                    }\r\n\r\n                })\r\n\r\n                .on('mouseout', function (d, i) {\r\n\r\n                    tooltip.style(\"display\", \"none\")\r\n\r\n                });\r\n\r\n        }\r\n\r\n \r\n\r\n        var background = g.append(\"path\")\r\n\r\n            .datum({ endAngle: endAngle })\r\n\r\n            .style(\"fill\", \"#d9d9d9\")\r\n\r\n            .attr(\"d\", arc)\r\n\r\n            .on('mouseover', function (d, i) {\r\n\r\n                if (options.tooltip) {\r\n\r\n                    tooltip\r\n\r\n                        .style('top', (d3.event.pageY - 50) + 'px')\r\n\r\n                        .style('left', (d3.event.pageX - 50) + 'px')\r\n\r\n                        .style(\"display\", \"block\")\r\n\r\n                        .html(\"Total: 100\");\r\n\r\n                }\r\n\r\n            })\r\n\r\n            .on('mousemove', function (d, i) {\r\n\r\n                if (options.tooltip) {\r\n\r\n                    tooltip\r\n\r\n                        .style('top', (d3.event.pageY - 50) + 'px')\r\n\r\n                        .style('left', (d3.event.pageX - 50) + 'px')\r\n\r\n                        .style(\"display\", \"block\")\r\n\r\n                        .html(\"Total: 100\");\r\n\r\n                }\r\n\r\n            })\r\n\r\n            .on('mouseout', function (d, i) {\r\n\r\n                tooltip.style(\"display\", \"none\")\r\n\r\n            });\r\n\r\n \r\n\r\n        var foreground;\r\n\r\n        for (var i = 0; i < loopCount; i++) {\r\n\r\n            let fillColor = colors[i];\r\n\r\n            foreground = g.append(\"path\").attr(\"class\", \"arcForeground\")\r\n\r\n                .datum({ endAngle: startAngle + (targetPercent * totalAngle) })\r\n\r\n                .attr(\"fill\", fillColor)\r\n\r\n                .attr(\"d\", forgroundArc)\r\n\r\n            startAngle = startAngle + (targetPercent * totalAngle);\r\n\r\n            forgroundArc = d3.arc()\r\n\r\n                .innerRadius(foregroundInnerRadius)\r\n\r\n                .outerRadius(outerRadius)\r\n\r\n                .startAngle(startAngle);\r\n\r\n        }\r\n\r\n        if (data !== 1) {\r\n\r\n            foreground.attr(\"fill\", \"#92d050\");\r\n\r\n            currentPercentData = targetPercent * 100;\r\n\r\n        }\r\n\r\n        else {\r\n\r\n            targetPercent = currentPercent;\r\n\r\n        }\r\n\r\n \r\n\r\n        var percentText = g.append('text').attr('class', 'percentText')\r\n\r\n            .attr('fill', percentCenterTextColor)\r\n\r\n            .style('font-weight', 'bold')\r\n\r\n            .style('font-size', '3em')\r\n\r\n            .style('font-family', 'sans-serif')\r\n\r\n            .attr('text-anchor', 'middle')\r\n\r\n            .text(currentPercentData + '%');\r\n\r\n \r\n\r\n    }\r\n\r\n \r\n\r\n    render() {\r\n\r\n        return (<div ref={node => (this.node = node)} />);\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default GaugeChart;","import TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport React, { Component } from 'react';\nimport \"react-alice-carousel/lib/alice-carousel.css\";\nimport { Card, Col, Container, Row } from 'react-bootstrap';\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport \"slick-carousel/slick/slick.css\";\nimport './App.css';\nimport InteractionChart from './Components/InteractionChart/InteractionChart';\nimport InteractionChartData from './Components/InteractionChart/InteractionChartData';\nimport HorizontalBarChart from './Components/HorizontalBarChart/HorizontalBarChart';\nimport HorizontalBarChartTestData from './Components/HorizontalBarChart/HorizontalBarChartTestData';\nimport HorizontalBarChartTestOptions from './Components/HorizontalBarChart/HorizontalBarChartOptions';\nimport LineChart from './Components/LineChart/LineChart';\nimport LineChartTestData from './Components/LineChart/LineChartTestData';\nimport LineChartTestOptions from './Components/LineChart/LineChartTestOptions';\nimport LiquidFilledGauge from './Components/LiquidFilledGauge/LiquidFilledGauge';\nimport LiquidFilledGaugeTestOptions from './Components/LiquidFilledGauge/LiquidFilledGaugeTestOptions';\nimport LiquidFilledGaugeThree from './Components/LiquidFilledGauge/LiquidFilledGaugeThree';\nimport LiquidFilledGaugeTwo from './Components/LiquidFilledGauge/LiquidFilledGaugeTwo';\nimport LongMenu from './Components/Menu/LongMenu';\nimport ZoomableBubbleChart from './Components/ZoomableBubbleChart/ZoomableBubbleChart';\nimport ZoomableBubbleChartTestData from './Components/ZoomableBubbleChart/ZoomableBubbleChartTestData';\nimport ZoomableBubbleChartTestOptions from './Components/ZoomableBubbleChart/ZoomableBubbleChartTestOptions';\nimport logo from './CSLOGO.png';\nimport GaugeChart from './Components/GaugeChart/GaugeChart';\n\n\n\nconst cities = [\n  { title: 'Viken', year: 1994 },\n  { title: 'Halden', year: 1972 },\n  { title: 'Fredrikstad', year: 1974 }\n];\nconst chartStyle = {\n  height: 200,\n  width: 500\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = { selectedCity: \"Viken\" }\n    this.handleComboBoxChange = this.handleComboBoxChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n\n  }\n  handleComboBoxChange(newValue) {\n    this.setState({\n      selectedCity: newValue.title\n    })\n  }\n\n  handleClick() {\n    this.setState({\n      open: !this.state.open\n    });\n  }\n\n  render() {\n    var ReactTitle = require('reactjs-title');\n    var Title = ReactTitle.default;\n    var flushTitle = ReactTitle.flushTitle;\n    var settings = {\n      dots: true,\n      autoplay: false\n    };\n    var circleStyle = {\n      padding: 10,\n      margin: 20,\n      display: \"inline-block\",\n      backgroundColor: this.props.bgColor,\n      borderRadius: \"50%\",\n      width: 100,\n      height: 100,\n    };\n    return (\n      <Container fluid className=\"App\">\n        <Row className=\"titleRow\">\n          <Col lg={6} md={6} sm={6} xs={6} className=\"logoCol\">\n            <img src={logo} className=\"loogo\" />\n          </Col>\n\n          <Col lg={6} md={6} sm={6} xs={6} className=\"menuCol\">\n            <LongMenu />\n          </Col>\n        </Row>\n        <Row>\n          <h3 className=\"norwaytitle\">Norway</h3>\n        </Row>\n        <Row className=\"liquidGaugeRow\">\n          <Col lg={4} md={4} sm={4} xs={4} className=\"liquidGaugeChartCol\">\n            <Card class=\"shadow p-3 mb-5 bg-white rounded\" className=\"liquidGaugeCard1\">\n              <h4 class=\"card-title text-center\" className=\"card1title\">23600</h4>\n              <h6 class=\"card-subtitle mb-2 text-center\" className=\"card1subtitle\">Total</h6>\n              \n              {/* <LiquidFilledGauge\n                title={'Liquid Filled Gauge'}\n                data={.35}\n                options={LiquidFilledGaugeTestOptions}\n              /> */}\n            </Card>\n          </Col>\n          <Col lg={4} md={4} sm={4} xs={4} className=\"liquidGaugeChartCol\">\n            <Card className=\"liquidGaugeCard2\">\n            <h4 class=\"card-title text-center\" className=\"card2title\">375</h4>\n              <h6 class=\"card-subtitle mb-2 text-center\" className=\"card2subtitle\">New Today</h6>\n              {/* <LiquidFilledGaugeTwo\n                title={'Liquid Filled Gauge'}\n                data={62}\n                options={LiquidFilledGaugeTestOptions}\n              /> */}\n            </Card>\n          </Col>\n          <Col lg={4} md={4} sm={4} xs={4} className=\"liquidGaugeChartCol\">\n            <Card className=\"liquidGaugeCard3\">\n            <h4 class=\"card-title text-center\" className=\"card3title\">84</h4>\n              <h6 class=\"card-subtitle mb-2 text-center\" className=\"card3subtitle\">Hospitalized</h6>\n              {/* <LiquidFilledGaugeThree\n                title={'Liquid Filled Gauge'}\n                data={4}\n                options={LiquidFilledGaugeTestOptions}\n              /> */}\n            </Card>\n          </Col>\n        </Row>\n        <Row>\n          <Col lg={12} md={12} sm={12} xs={12} className=\"comboBoxCol\">\n            <Autocomplete\n              id=\"combo-box-demo\"\n              options={cities}\n              style={{ width: \"93%\"}}\n              onChange={(e, newValue) => this.handleComboBoxChange(newValue)}\n              getOptionLabel={(option) => option.title}\n              renderInput={(params) => <TextField {...params} label=\"Where do you want to check next?\" variant=\"outlined\" />}\n            />\n          </Col>\n        </Row>\n        \n        <Row >\n          <Col lg={12}>\n            <Card className=\"chartcard1\">\n              <div class=\"card-title text-left\" className=\"maincardtitle1\">Registered Infections (7 Days)</div>\n              <InteractionChart\n                title={'InteractionChart'}\n                data={InteractionChartData}\n                keyValue={this.state.selectedCity}\n              />\n              <Row>\n              <Col lg={4} md={4} sm={4} xs={4} >\n\n              <div class=\"card-title text-center\" className=\"titlecards\">6 382</div>\n              <div class=\"card-subtitle mb-2 text-muted text-center\" className=\"subtitlecards\">Total</div>\n              </Col>\n              <Col lg={4} md={4} sm={4} xs={4} >\n              \n              <div class=\"card-title text-center\" className=\"titlecards\">100</div>\n              <div class=\"card-subtitle mb-2 text-muted text-center\" className=\"subtitlecards\">New Today</div>\n              </Col>\n              <Col lg={4} md={4} sm={4} xs={4} >\n\n              <div class=\"card-title text-center\" className=\"titlecards\">131,3</div>\n              <div class=\"card-subtitle mb-2 text-muted text-center\" className=\"subtitlecards\">Per 100k, Last 14 Days.</div>\n              </Col>\n              </Row>\n            </Card>\n          </Col>\n        </Row>\n\n\n        <Row >\n          <Col lg={12}>\n            <Card className=\"chartcard1\">\n              <div class=\"card-title text-left\" className=\"maincardtitle1\">Trends in Reg. Infections</div>\n              <GaugeChart data={1} indicator={true} currentPercent={\"34\"} type={\"\"}/>\n            </Card>\n          </Col>\n        </Row>\n\n        \n\n        <Row >\n          <Col lg={12}>\n            <Card className=\"chartcard3\">\n            <div class=\"card-title text-left\" className=\"maincardtitle1\">Hospitalizations (7 Days)</div>\n              <HorizontalBarChart\n                title={'Horizontal Bar Chart'}\n                data={HorizontalBarChartTestData}\n                options={HorizontalBarChartTestOptions}\n              />\n\n              <Row>\n              <Col lg={6} md={6} sm={6} xs={6} >\n\n              <div class=\"card-title text-center\" className=\"titlecards\">51</div>\n              <div class=\"card-subtitle mb-2 text-muted text-center\" className=\"subtitlecards\">Yesterday</div>\n              </Col>\n              <Col lg={6} md={6} sm={6} xs={6} >\n              \n              <div class=\"card-title text-center\" className=\"titlecards\">46</div>\n              <div class=\"card-subtitle mb-2 text-muted text-center\" className=\"subtitlecards\">Today</div>\n              </Col>\n              \n              </Row>\n            </Card>\n          </Col>\n        </Row>\n\n      </Container >\n\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/CSLOGO.e7175448.png\";"],"sourceRoot":""}